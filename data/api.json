{
  "resources": [
    {
      "name": "Admins",
      "services": [
        {
          "arguments": [
            {
              "name": "user_id",
              "type": "String",
              "description": "The id of the user to promote."
            },
            {
              "name": "role",
              "type": "Optional, String",
              "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to 'AccountAdmin'."
            },
            {
              "name": "send_confirmation",
              "type": "Optional, Boolean",
              "description": "Send a notification email to"
            }
          ],
          "description": "Make an account admin",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/admins"
        },
        {
          "arguments": [
            {
              "name": "role",
              "type": "Optional, String",
              "description": "Account role to remove from the user. Defaults to 'AccountAdmin'. Any other\naccount role must be specified explicitly."
            }
          ],
          "description": "Remove account admin",
          "method": "DELETE",
          "endpoint": "/api/v1/accounts/:account_id/admins/:user_id"
        },
        {
          "arguments": [],
          "description": "List account admins",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/admins"
        }
      ]
    },
    {
      "name": "Account Reports",
      "services": [
        {
          "arguments": [],
          "description": "List Available Reports",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/reports"
        },
        {
          "arguments": [
            {
              "name": "[parameters]",
              "description": ""
            }
          ],
          "description": "Start a Report",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/reports/:report"
        },
        {
          "arguments": [],
          "description": "Index of Reports",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/reports/:report"
        },
        {
          "arguments": [
            {
              "name": "report_id",
              "type": "Integer",
              "description": "The report id."
            }
          ],
          "description": "Status of a Report",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/reports/:report/:id"
        },
        {
          "arguments": [],
          "description": "Delete a Report",
          "method": "DELETE",
          "endpoint": "/api/v1/accounts/:account_id/reports/:report/:id"
        }
      ]
    },
    {
      "name": "Account Authentication Services",
      "services": [
        {
          "arguments": [],
          "description": "List Authorization Configs",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs"
        },
        {
          "arguments": [],
          "description": "Create Authorization Config",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs"
        },
        {
          "arguments": [],
          "description": "Update Authorization Config",
          "method": "PUT",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs/:id"
        },
        {
          "arguments": [],
          "description": "Get Authorization Config",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs/:id"
        },
        {
          "arguments": [],
          "description": "Delete Authorization Config",
          "method": "DELETE",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs/:id"
        },
        {
          "arguments": [],
          "description": "GET discovery url",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs/discovery_url"
        },
        {
          "arguments": [],
          "description": "Set discovery url",
          "method": "PUT",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs/discovery_url"
        },
        {
          "arguments": [],
          "description": "Delete discovery url",
          "method": "DELETE",
          "endpoint": "/api/v1/accounts/:account_id/account_authorization_configs/discovery_url"
        }
      ]
    },
    {
      "name": "Accounts",
      "services": [
        {
          "arguments": [],
          "description": "List accounts",
          "method": "GET",
          "endpoint": "/api/v1/accounts"
        },
        {
          "arguments": [],
          "description": "Get a single account",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:id"
        },
        {
          "arguments": [
            {
              "name": "recursive",
              "type": "Optional, Boolean",
              "description": "If true, the entire account tree underneath"
            }
          ],
          "description": "Get the sub-accounts of an account",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/sub_accounts"
        },
        {
          "arguments": [
            {
              "name": "with_enrollments",
              "type": "Optional, Boolean",
              "description": "If true, include only courses with at least one enrollment.  If false,\ninclude only courses with no enrollments.  If not present, do not filter on\ncourse enrollment status."
            },
            {
              "name": "published",
              "type": "Optional, Boolean",
              "description": "If true, include only published courses.  If false, exclude published\ncourses.  If not present, do not filter on published status."
            },
            {
              "name": "completed",
              "type": "Optional, Boolean",
              "description": "If true, include only completed courses (these may be in state 'completed',\nor their enrollment term may have ended).  If false, exclude completed\ncourses.  If not present, do not filter on completed status."
            },
            {
              "name": "by_teachers[]",
              "type": "Optional, Integer",
              "description": "List of User IDs of teachers; if supplied, include only courses taught by\none of the referenced users."
            },
            {
              "name": "by_subaccounts[]",
              "type": "Optional, Integer",
              "description": "List of Account IDs; if supplied, include only courses associated with one\nof the referenced subaccounts."
            },
            {
              "name": "hide_enrollmentless_courses",
              "type": "Optional, Boolean",
              "description": "If present, only return courses that have at least one enrollment.\nEquivalent to 'with_enrollments=true'; retained for compatibility."
            },
            {
              "name": "state[]",
              "type": "Optional, \"created\"|\"claimed\"|\"available\"|\"completed\"|\"deleted\"",
              "description": "If set, only return courses that are in the given state(s). By default, all\nstates but \"deleted\" are returned."
            },
            {
              "name": "enrollment_term_id",
              "type": "Optional, Integer",
              "description": "If set, only includes courses from the specified term."
            }
          ],
          "description": "List active courses in an account",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/courses"
        },
        {
          "arguments": [
            {
              "name": "account[name]",
              "type": "Optional, String",
              "description": "Updates the account name"
            },
            {
              "name": "account[default_time_zone]",
              "type": "Optional, String",
              "description": "The default time zone of the account. Allowed time zones are\nIANA time zones or friendlier\nRuby on Rails time zones."
            },
            {
              "name": "account[default_storage_quota_mb]",
              "type": "Optional, Integer",
              "description": "The default course storage quota to be used, if not otherwise specified."
            },
            {
              "name": "account[default_user_storage_quota_mb]",
              "type": "Optional, Integer",
              "description": "The default user storage quota to be used, if not otherwise specified."
            },
            {
              "name": "account[default_group_storage_quota_mb]",
              "type": "Optional, Integer",
              "description": "The default group storage quota to be used, if not otherwise specified."
            }
          ],
          "description": "Update an account",
          "method": "PUT",
          "endpoint": "/api/v1/accounts/:id"
        }
      ]
    },
    {
      "name": "Announcement External Feeds",
      "services": [
        {
          "arguments": [],
          "description": "List external feeds",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/external_feeds\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "The url to the external rss or atom feed"
            },
            {
              "name": "header_match",
              "type": "Optional, Boolean",
              "description": "If given, only feed entries that contain this string in their title will be\nimported"
            },
            {
              "name": "verbosity",
              "type": "String, \"full\"|\"truncate\"|\"link_only\"",
              "description": ""
            }
          ],
          "description": "Create an external feed",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/external_feeds\n\n"
        },
        {
          "arguments": [],
          "description": "Delete an external feed",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/external_feeds/:external_feed_id\n\n"
        }
      ]
    },
    {
      "name": "Appointment Groups",
      "services": [
        {
          "arguments": [
            {
              "name": "scope",
              "type": "Optional, String, \"reservable\"|\"manageable\"",
              "description": "Defaults to \"reservable\""
            },
            {
              "name": "context_codes[]",
              "type": "Optional, String",
              "description": "Array of context codes used to limit returned results."
            },
            {
              "name": "include_past_appointments",
              "type": "Optional, Boolean",
              "description": "Defaults to false. If true, includes past appointment groups"
            },
            {
              "name": "include[]",
              "type": "Optional, \"appointments\"|\"child_events\"|\"participant_count\"|\"reserved_times\"",
              "description": "Array of additional information to include.\n\"appointments\"\n\ncalendar event time slots for this appointment group\n\"child_events\"\n\nreservations of those time slots\n\"participant_count\"\n\nnumber of reservations\n\"reserved_times\"\n\nthe event id, start time and end time of reservations the current user has\nmade)\n\n\ncalendar event time slots for this appointment group\n\nreservations of those time slots\n\nnumber of reservations\n\nthe event id, start time and end time of reservations the current user has\nmade)"
            }
          ],
          "description": "List appointment groups",
          "method": "GET",
          "endpoint": "/api/v1/appointment_groups"
        },
        {
          "arguments": [
            {
              "name": "appointment_group[context_codes][]",
              "type": "String",
              "description": "Array of context codes (courses, e.g. course_1) this group should be linked\nto (1 or more). Users in the course(s) with appropriate permissions will be\nable to sign up for this appointment group."
            },
            {
              "name": "appointment_group[sub_context_codes][]",
              "type": "Optional, String",
              "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\"."
            },
            {
              "name": "appointment_group[title]",
              "type": "Optional, String",
              "description": "Short title for the appointment group."
            },
            {
              "name": "appointment_group[description]",
              "type": "Optional, String",
              "description": "Longer text description of the appointment group."
            },
            {
              "name": "appointment_group[location_name]",
              "type": "Optional, String",
              "description": "Location name of the appointment group."
            },
            {
              "name": "appointment_group[location_address]",
              "type": "Optional, String",
              "description": "Location address."
            },
            {
              "name": "appointment_group[publish]",
              "type": "Optional, Boolean",
              "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false."
            },
            {
              "name": "appointment_group[participants_per_appointment]",
              "type": "Optional, Integer",
              "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit)."
            },
            {
              "name": "appointment_group[min_appointments_per_participant]",
              "type": "Optional, Integer",
              "description": "Minimum number of time slots a user must register for. If not set, users do\nnot need to sign up for any time slots."
            },
            {
              "name": "appointment_group[max_appointments_per_participant]",
              "type": "Optional, Integer",
              "description": "Maximum number of time slots a user may register for."
            },
            {
              "name": "appointment_group[new_appointments][X][]",
              "type": "Optional",
              "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request."
            },
            {
              "name": "appointment_group[participant_visibility]",
              "type": "Optional, \"private\"|\"protected\"",
              "description": ""
            }
          ],
          "description": "Create an appointment group",
          "method": "POST",
          "endpoint": "/api/v1/appointment_groups"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "Optional, \"child_events\"|\"appointments\"",
              "description": "Array of additional information to include. Ssee include[] argument of\n\"List appointment groups\" action.\n\"child_events\"\n\nreservations of time slots time slots\n\"appointments\"\n\nwill always be returned\n\n\nreservations of time slots time slots\n\nwill always be returned"
            }
          ],
          "description": "Get a single appointment group",
          "method": "GET",
          "endpoint": "/api/v1/appointment_groups/:id"
        },
        {
          "arguments": [
            {
              "name": "appointment_group[context_codes][]",
              "type": "String",
              "description": "Array of context codes (courses, e.g. course_1) this group should be linked\nto (1 or more). Users in the course(s) with appropriate permissions will be\nable to sign up for this appointment group."
            },
            {
              "name": "appointment_group[sub_context_codes][]",
              "type": "Optional, String",
              "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\"."
            },
            {
              "name": "appointment_group[title]",
              "type": "Optional, String",
              "description": "Short title for the appointment group."
            },
            {
              "name": "appointment_group[description]",
              "type": "Optional, String",
              "description": "Longer text description of the appointment group."
            },
            {
              "name": "appointment_group[location_name]",
              "type": "Optional, String",
              "description": "Location name of the appointment group."
            },
            {
              "name": "appointment_group[location_address]",
              "type": "Optional, String",
              "description": "Location address."
            },
            {
              "name": "appointment_group[publish]",
              "type": "Optional, Boolean",
              "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false."
            },
            {
              "name": "appointment_group[participants_per_appointment]",
              "type": "Optional, Integer",
              "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit)."
            },
            {
              "name": "appointment_group[min_appointments_per_participant]",
              "type": "Optional, Integer",
              "description": "Minimum number of time slots a user must register for. If not set, users do\nnot need to sign up for any time slots."
            },
            {
              "name": "appointment_group[max_appointments_per_participant]",
              "type": "Optional, Integer",
              "description": "Maximum number of time slots a user may register for."
            },
            {
              "name": "appointment_group[new_appointments][X][]",
              "type": "Optional",
              "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request."
            },
            {
              "name": "appointment_group[participant_visibility]",
              "type": "Optional, \"private\"|\"protected\"",
              "description": ""
            }
          ],
          "description": "Update an appointment group",
          "method": "PUT",
          "endpoint": "/api/v1/appointment_groups/:id"
        },
        {
          "arguments": [
            {
              "name": "cancel_reason",
              "type": "Optional, String",
              "description": "Reason for deleting/canceling the appointment group."
            }
          ],
          "description": "Delete an appointment group",
          "method": "DELETE",
          "endpoint": "/api/v1/appointment_groups/:id"
        },
        {
          "arguments": [
            {
              "name": "registration_status",
              "type": "Optional, \"all\"|\"registered\"|\"registered\"",
              "description": "Limits results to the a given participation status, defaults to \"all\""
            }
          ],
          "description": "List user participants",
          "method": "GET",
          "endpoint": "/api/v1/appointment_groups/:id/users"
        },
        {
          "arguments": [
            {
              "name": "registration_status",
              "type": "Optional, \"all\"|\"registered\"|\"registered\"",
              "description": "Limits results to the a given participation status, defaults to \"all\""
            }
          ],
          "description": "List student group participants",
          "method": "GET",
          "endpoint": "/api/v1/appointment_groups/:id/groups"
        }
      ]
    },
    {
      "name": "Assignment Groups",
      "services": [
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"assignments\"|\"discussion_topic\"|\"all_dates\"",
              "description": "Associations to include with the group. both \"discussion_topic\" and\n\"all_dates\" is only valid are only valid if \"assignments\" is also included."
            },
            {
              "name": "override_assignment_dates",
              "type": "Optional, Boolean",
              "description": "Apply assignment overrides for each assignment, defaults to true."
            }
          ],
          "description": "List assignment groups",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignment_groups"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "\"assignments\"|\"discussion_topic\"",
              "description": "Associations to include with the group. \"discussion_topic\" is only valid if\n\"assignments\" is also included."
            },
            {
              "name": "override_assignment_dates",
              "type": "Optional, Boolean",
              "description": "Apply assignment overrides for each assignment, defaults to true."
            }
          ],
          "description": "Get an Assignment Group",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignment_groups/:assignment_group_id"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "Optional, String",
              "description": "The assignment group's name"
            },
            {
              "name": "position",
              "type": "Optional, Integer",
              "description": "The position of this assignment group in relation to the other assignment\ngroups"
            },
            {
              "name": "group_weight",
              "type": "Optional, Float",
              "description": "The percent of the total grade that this assignment group represents"
            },
            {
              "name": "rules",
              "type": "Optional",
              "description": "The grading rules that are applied within this assignment group See the\nAssignment Group object definition for format"
            }
          ],
          "description": "Create an Assignment Group",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/assignment_groups"
        },
        {
          "arguments": [],
          "description": "Edit an Assignment Group",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/assignment_groups/:assignment_group_id"
        },
        {
          "arguments": [
            {
              "name": "move_assignment_to",
              "type": "String",
              "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted."
            }
          ],
          "description": "Destroy an Assignment Group",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/assignment_groups/:assignment_group_id"
        }
      ]
    },
    {
      "name": "Collaborations",
      "services": [
        {
          "arguments": [],
          "description": "List members of a collaboration.",
          "method": "GET",
          "endpoint": "/api/v1/collaborations/:id/members"
        }
      ]
    },
    {
      "name": "Assignments",
      "services": [
        {
          "arguments": [],
          "description": "Delete an assignment",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/assignments/:id"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"submission\"",
              "description": "Associations to include with the assignment."
            },
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial title of the assignments to match and return."
            },
            {
              "name": "override_assignment_dates",
              "type": "Optional, Boolean",
              "description": "Apply assignment overrides for each assignment, defaults to true."
            }
          ],
          "description": "List assignments",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignments"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"submission\"",
              "description": "Associations to include with the assignment."
            },
            {
              "name": "override_assignment_dates",
              "type": "Optional, Boolean",
              "description": "Apply assignment overrides to the assignment, defaults to true."
            }
          ],
          "description": "Get a single assignment",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignments/:id"
        },
        {
          "arguments": [
            {
              "name": "assignment[name]",
              "type": "String",
              "description": "The assignment name."
            },
            {
              "name": "assignment[position]",
              "type": "Integer",
              "description": "The position of this assignment in the group when displaying assignment\nlists."
            },
            {
              "name": "assignment[submission_types][]",
              "type": "String, \"online_quiz\"|\"none\"|\"on_paper\"|\"online_quiz\"|\"discussion_topic\"|\"external_tool\"|\"online_upload\"|\"online_text_entry\"|\"online_url\"|\"media_recording\"",
              "description": "List of supported submission types for the assignment. Unless the\nassignment is allowing online submissions, the array should only have one\nelement.\n\nIf not allowing online submissions, your options are:\n\n\"online_quiz\"\n\"none\"\n\"on_paper\"\n\"online_quiz\"\n\"discussion_topic\"\n\"external_tool\"\n\nIf you are allowing online submissions, you can have one or many allowed\nsubmission types:\n\n\"online_upload\"\n\"online_text_entry\"\n\"online_url\"\n\"media_recording\" (Only valid when the Kaltura plugin is enabled)"
            },
            {
              "name": "assignment[allowed_extensions][]",
              "type": "String",
              "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n\nallowed_extensions: [\"docx\",\"ppt\"]"
            },
            {
              "name": "assignment[turnitin_enabled]",
              "type": "Optional, Boolean",
              "description": "Only applies when the Turnitin plugin is enabled for a course and the\nsubmission_types array includes \"online_upload\". Toggles Turnitin\nsubmissions for the assignment. Will be ignored if Turnitin is not\navailable for the course."
            },
            {
              "name": "assignment[turnitin_settings]",
              "type": "Optional",
              "description": "Settings to send along to turnitin. See Assignment object definition for\nformat."
            },
            {
              "name": "assignment[peer_reviews]",
              "type": "Optional, Boolean",
              "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews will be\nturned on for the assignment."
            },
            {
              "name": "assignment[automatic_peer_reviews]",
              "type": "Optional, Boolean",
              "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled."
            },
            {
              "name": "assignment[notify_of_update]",
              "type": "Optional, Boolean",
              "description": "If true, Canvas will send a notification to students in the class notifying\nthem that the content has changed."
            },
            {
              "name": "assignment[group_category_id]",
              "type": "Optional, Integer",
              "description": "If present, the assignment will become a group assignment assigned to the\ngroup."
            },
            {
              "name": "assignment[grade_group_students_individually]",
              "type": "Optional, Integer",
              "description": "If this is a group assignment, teachers have the options to grade students\nindividually. If false, Canvas will apply the assignment's score to each\nmember of the group. If true, the teacher can manually assign scores to\neach member of the group."
            },
            {
              "name": "assignment[external_tool_tag_attributes]",
              "type": "Optional",
              "description": "Hash of attributes if submission_types is [\"external_tool\"] Example:\n\nexternal_tool_tag_attributes: {\n  %r/ url to the external tool\n  url: \"http://instructure.com\",\n  %r/ create a new tab for the module, defaults to false.\n  new_tab: false\n}"
            },
            {
              "name": "assignment[points_possible]",
              "type": "Float",
              "description": "The maximum points possible on the assignment."
            },
            {
              "name": "assignment[grading_type]",
              "type": "Optional, \"pass_fail\"|\"percent\"|\"letter_grade\"|\"points\"",
              "description": "The strategy used for grading the assignment. The assignment is ungraded if\nthis field is omitted."
            },
            {
              "name": "assignment[due_at]",
              "type": "Timestamp",
              "description": "The day/time the assignment is due. Accepts times in ISO 8601 format, e.g.\n2011-10-21T18:48Z."
            },
            {
              "name": "assignment[lock_at]",
              "type": "Timestamp",
              "description": "The day/time the assignment is locked after. Accepts times in ISO 8601\nformat, e.g. 2011-10-21T18:48Z."
            },
            {
              "name": "assignment[unlock_at]",
              "type": "Timestamp",
              "description": "The day/time the assignment is unlocked. Accepts times in ISO 8601 format,\ne.g. 2011-10-21T18:48Z."
            },
            {
              "name": "assignment[description]",
              "type": "String",
              "description": "The assignment's description, supports HTML."
            },
            {
              "name": "assignment[assignment_group_id]",
              "type": "Integer",
              "description": "The assignment group id to put the assignment in. Defaults to the top\nassignment group in the course."
            },
            {
              "name": "assignment[muted]",
              "type": "Boolean",
              "description": "Whether this assignment is muted. A muted assignment does not send change\nnotifications and hides grades from students. Defaults to false."
            },
            {
              "name": "assignment[assignment_overrides][]",
              "type": "Optional, AssignmentOverride",
              "description": "List of overrides for the assignment. NOTE: The assignment overrides\nfeature is in beta."
            },
            {
              "name": "assignment[published]",
              "type": "Optional, Boolean",
              "description": "Whether this assignment is published. (Only uaeful if 'enable draft'\naccount setting is on) Unpublished assignments are not visible to students."
            }
          ],
          "description": "Create an assignment",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/assignments"
        },
        {
          "arguments": [],
          "description": "Edit an assignment",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/assignments/:id"
        },
        {
          "arguments": [],
          "description": "List assignment overrides",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/overrides"
        },
        {
          "arguments": [],
          "description": "Get a single assignment override",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id"
        },
        {
          "arguments": [],
          "description": "Redirect to the assignment override for a group",
          "method": "GET",
          "endpoint": "/api/v1/groups/:group_id/assignments/:assignment_id/override"
        },
        {
          "arguments": [],
          "description": "Redirect to the assignment override for a section",
          "method": "GET",
          "endpoint": "/api/v1/sections/:course_section_id/assignments/:assignment_id/override"
        },
        {
          "arguments": [
            {
              "name": "assignment_override[student_ids][]",
              "type": "Optional, Integer",
              "description": "The IDs of"
            },
            {
              "name": "assignment_override[title]",
              "type": "Optional",
              "description": "The title of the adhoc"
            },
            {
              "name": "assignment_override[group_id]",
              "type": "Optional, Integer",
              "description": "The ID of the"
            },
            {
              "name": "assignment_override[course_section_id]",
              "type": "Optional, Integer",
              "description": "The ID"
            },
            {
              "name": "assignment_override[due_at]",
              "type": "Optional, Timestamp",
              "description": "The day/time"
            },
            {
              "name": "assignment_override[unlock_at]",
              "type": "Optional, Timestamp",
              "description": "The day/time"
            },
            {
              "name": "assignment_override[lock_at]",
              "type": "Optional, Timestamp",
              "description": "The day/time"
            }
          ],
          "description": "Create an assignment override",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/overrides"
        },
        {
          "arguments": [
            {
              "name": "assignment_override[student_ids][]",
              "type": "Optional, Integer",
              "description": "The IDs of the"
            },
            {
              "name": "assignment_override[title]",
              "type": "Optional, String",
              "description": "The title of an adhoc"
            },
            {
              "name": "assignment_override[due_at]",
              "type": "Optional, Timestamp",
              "description": "The day/time"
            },
            {
              "name": "assignment_override[unlock_at]",
              "type": "Optional, Timestamp",
              "description": "The day/time"
            },
            {
              "name": "assignment_override[lock_at]",
              "type": "Optional, Timestamp",
              "description": "The day/time"
            }
          ],
          "description": "Update an assignment override",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id"
        },
        {
          "arguments": [],
          "description": "Delete an assignment override",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/overrides/:id"
        }
      ]
    },
    {
      "name": "Authentications Log",
      "services": [
        {
          "arguments": [
            {
              "name": "start_time",
              "type": "Optional, DateTime",
              "description": "The beginning of the time range from which you want events."
            },
            {
              "name": "end_time",
              "type": "Optional, Datetime",
              "description": "The end of the time range from which you want events."
            }
          ],
          "description": "Query by pseudonym.",
          "method": "GET",
          "endpoint": "/api/v1/audit/authentication/pseudonyms/:pseudonym_id"
        },
        {
          "arguments": [
            {
              "name": "start_time",
              "type": "Optional, Datetime",
              "description": "The beginning of the time range from which you want events."
            },
            {
              "name": "end_time",
              "type": "Optional, Datetime",
              "description": "The end of the time range from which you want events."
            }
          ],
          "description": "Query by account.",
          "method": "GET",
          "endpoint": "/api/v1/audit/authentication/accounts/:account_id"
        },
        {
          "arguments": [
            {
              "name": "start_time",
              "type": "Optional, Datetime",
              "description": "The beginning of the time range from which you want events."
            },
            {
              "name": "end_time",
              "type": "Optional, Datetime",
              "description": "The end of the time range from which you want events."
            }
          ],
          "description": "Query by user.",
          "method": "GET",
          "endpoint": "/api/v1/audit/authentication/users/:user_id"
        }
      ]
    },
    {
      "name": "Analytics",
      "services": [
        {
          "arguments": [],
          "description": "Get department-level participation data",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/analytics/terms/:term_id/activity\n\n"
        },
        {
          "arguments": [],
          "description": "Get department-level grade data",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/analytics/terms/:term_id/grades\n\n"
        },
        {
          "arguments": [],
          "description": "Get department-level statistics",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/analytics/terms/:term_id/statistics\n\n"
        },
        {
          "arguments": [],
          "description": "Get course-level participation data",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/analytics/activity"
        },
        {
          "arguments": [
            {
              "name": "async",
              "type": "Boolean",
              "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead of\nan assignments array. If it does, then it is the caller's responsibility to\npoll the API again to see if the progress is complete. If the data is ready\n(possibly even on the first async call) then it will be passed back\nnormally, as documented in the example response."
            }
          ],
          "description": "Get course-level assignment data",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/analytics/assignments"
        },
        {
          "arguments": [],
          "description": "Get course-level student summary data",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/analytics/student_summaries"
        },
        {
          "arguments": [],
          "description": "Get user-in-a-course-level participation data",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/analytics/users/:student_id/activity"
        },
        {
          "arguments": [],
          "description": "Get user-in-a-course-level assignment data",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/analytics/users/:student_id/assignments"
        },
        {
          "arguments": [],
          "description": "Get user-in-a-course-level messaging data",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/analytics/users/:student_id/communication"
        }
      ]
    },
    {
      "name": "Collections",
      "services": [
        {
          "arguments": [],
          "description": "List user/group collections",
          "method": "GET",
          "endpoint": "/api/v1/users/:user_id/collections\n\n"
        },
        {
          "arguments": [],
          "description": "List pinnable collections",
          "method": "GET",
          "endpoint": "/api/v1/collections"
        },
        {
          "arguments": [],
          "description": "Get a single collection",
          "method": "GET",
          "endpoint": "/api/v1/collections/:collection_id"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": ""
            },
            {
              "name": "visibility",
              "type": "String, \"public\"|\"private\"",
              "description": ""
            }
          ],
          "description": "Create a collection",
          "method": "POST",
          "endpoint": "/api/v1/users/:user_id/collections\n\n"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": ""
            },
            {
              "name": "visibility",
              "type": "String, \"public\"|\"private\"",
              "description": "Be advised that setting a public collection to private will permanantly\nremove all of its followers."
            }
          ],
          "description": "Edit a collection",
          "method": "PUT",
          "endpoint": "/api/v1/collections/:collection_id"
        },
        {
          "arguments": [],
          "description": "Delete a collection",
          "method": "DELETE",
          "endpoint": "/api/v1/collections/:collection_id"
        },
        {
          "arguments": [],
          "description": "Follow a collection",
          "method": "PUT",
          "endpoint": "/api/v1/collections/:collection_id/followers/self"
        },
        {
          "arguments": [],
          "description": "Un-follow a collection",
          "method": "DELETE",
          "endpoint": "/api/v1/collections/:collection_id/followers/self"
        },
        {
          "arguments": [],
          "description": "List collection items",
          "method": "GET",
          "endpoint": "/api/v1/collections/:collection_id/items\n\n"
        },
        {
          "arguments": [],
          "description": "Get an individual collection item",
          "method": "GET",
          "endpoint": "/api/v1/collections/items/:item_id"
        },
        {
          "arguments": [
            {
              "name": "link_url",
              "type": "String",
              "description": "The URL of the item to add. This can be any HTTP or HTTPS address. The\nitem_type will be determined by the link_url that is passed in.\n\nTo clone an existing item, pass in the url to that item as returned in the\nJSON response in the \"url\" field."
            },
            {
              "name": "title",
              "type": "String",
              "description": "The title of the item. If no title  is provided, Canvas will try to\nautomatically add a relevant title based on the linked content."
            },
            {
              "name": "description",
              "type": "String",
              "description": "The plain-text description of the item. If no description is provided,\nCanvas will try to automatically add a relevant description based on the\nlinked content."
            },
            {
              "name": "image_url",
              "type": "String",
              "description": "The URL of the image to use for this item. If no image url is provided,\nCanvas will try to automatically determine an image representation for the\nlink. This parameter is ignored if the new item is a clone of an existing\nitem."
            },
            {
              "name": "user_comment",
              "type": "String",
              "description": "The user's comments on the item. This can be set when cloning an existing\nitem, as well."
            }
          ],
          "description": "Create or clone a collection item",
          "method": "POST",
          "endpoint": "/api/v1/collections/:collection_id/items"
        },
        {
          "arguments": [
            {
              "name": "user_comment",
              "type": "String",
              "description": ""
            }
          ],
          "description": "Edit a collection item",
          "method": "PUT",
          "endpoint": "/api/v1/collections/items/:item_id"
        },
        {
          "arguments": [],
          "description": "Delete a collection item",
          "method": "DELETE",
          "endpoint": "/api/v1/collections/items/:item_id"
        },
        {
          "arguments": [],
          "description": "Upvote an item",
          "method": "PUT",
          "endpoint": "/api/v1/collections/items/:item_id/upvotes/self"
        },
        {
          "arguments": [],
          "description": "De-upvote an item",
          "method": "DELETE",
          "endpoint": "/api/v1/collections/items/:item_id/upvotes/self"
        }
      ]
    },
    {
      "name": "CommMessages",
      "services": [
        {
          "arguments": [
            {
              "name": "user_id",
              "type": "String",
              "description": "The user id for whom you want to retrieve CommMessages"
            },
            {
              "name": "start_time",
              "type": "Optional, DateTime",
              "description": "The beginning of the time range you want to retrieve message from."
            },
            {
              "name": "end_time",
              "type": "Optional, DateTime",
              "description": "The end of the time range you want to retrieve messages for."
            }
          ],
          "description": "List of CommMessages for a user",
          "method": "GET",
          "endpoint": "/api/v1/comm_messages"
        }
      ]
    },
    {
      "name": "Communication Channels",
      "services": [
        {
          "arguments": [],
          "description": "List user communication channels",
          "method": "GET",
          "endpoint": "/api/v1/users/:user_id/communication_channels"
        },
        {
          "arguments": [
            {
              "name": "communication_channel[address]",
              "type": "String",
              "description": "An email address or SMS number."
            },
            {
              "name": "communication_channel[type]",
              "type": "String, \"email\"|\"sms\"",
              "description": "The type of communication channel."
            },
            {
              "name": "skip_confirmation",
              "type": "Optional, Boolean",
              "description": "Only valid for site admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel."
            }
          ],
          "description": "Create a communication channel",
          "method": "POST",
          "endpoint": "/api/v1/users/:user_id/communication_channels"
        },
        {
          "arguments": [],
          "description": "Delete a communication channel",
          "method": "DELETE",
          "endpoint": "/api/v1/users/:user_id/communication_channels/:id"
        }
      ]
    },
    {
      "name": "Calendar Events",
      "services": [
        {
          "arguments": [
            {
              "name": "type",
              "type": "Optional, String, \"event\"|\"assignment\"",
              "description": "Defaults to \"event\""
            },
            {
              "name": "start_date",
              "type": "Optional, Date",
              "description": "Only return events since the start_date (inclusive).  Defaults to today.\nThe value should be formatted as: yyyy-mm-dd."
            },
            {
              "name": "end_date",
              "type": "Optional, Date",
              "description": "Only return events before the end_date (inclusive).  Defaults to\nstart_date. The value should be formatted as: yyyy-mm-dd. If end_date is\nthe same as start_date, then only events on that day are  returned."
            },
            {
              "name": "undated",
              "type": "Optional, Boolean",
              "description": "Defaults to false (dated events only). If true, only return undated events\nand ignore start_date and end_date."
            },
            {
              "name": "all_events",
              "type": "Optional, Boolean",
              "description": "Defaults to false (uses start_date, end_date, and undated criteria). If\ntrue, all events are returned, ignoring start_date, end_date, and undated\ncriteria."
            },
            {
              "name": "context_codes[]",
              "type": "Optional, String",
              "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,  no\ncourse/group events). Limited to 10 context codes, additional ones are \nignored. The format of this field is the context type, followed by an \nunderscore, followed by the context id. For example: course_42"
            }
          ],
          "description": "List calendar events",
          "method": "GET",
          "endpoint": "/api/v1/calendar_events"
        },
        {
          "arguments": [
            {
              "name": "calendar_event[context_code]",
              "type": "String",
              "description": "Context code of the course/group/user whose calendar this event should be\nadded to."
            },
            {
              "name": "calendar_event[title]",
              "type": "Optional, String",
              "description": "Short title for the calendar event."
            },
            {
              "name": "calendar_event[description]",
              "type": "Optional, String",
              "description": "Longer HTML description of the event."
            },
            {
              "name": "calendar_event[start_at]",
              "type": "Optional, DateTime",
              "description": "Start date/time of the event."
            },
            {
              "name": "calendar_event[end_at]",
              "type": "Optional, DateTime",
              "description": "End date/time of the event."
            },
            {
              "name": "calendar_event[location_name]",
              "type": "Optional, String",
              "description": "Location name of the event."
            },
            {
              "name": "calendar_event[location_address]",
              "type": "Optional, String",
              "description": "Location address"
            },
            {
              "name": "calendar_event[time_zone_edited]",
              "type": "Optional, String",
              "description": "Time zone of the user editing the event. Allowed time zones are\nIANA time zones or friendlier\nRuby on Rails time zones."
            },
            {
              "name": "calendar_event[child_event_data][X][start_at]",
              "type": "Optional, DateTime",
              "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at and\ncontext_code"
            },
            {
              "name": "calendar_event[child_event_data][X][end_at]",
              "type": "Optional, DateTime",
              "description": "Section-level end time(s) if this is a course event."
            },
            {
              "name": "calendar_event[child_event_data][X][context_code]",
              "type": "Optional, String",
              "description": "Context code(s) corresponding to the section-level start and end time(s)."
            }
          ],
          "description": "Create a calendar event",
          "method": "POST",
          "endpoint": "/api/v1/calendar_events"
        },
        {
          "arguments": [],
          "description": "Get a single calendar event or assignment",
          "method": "GET",
          "endpoint": "/api/v1/calendar_events/:id"
        },
        {
          "arguments": [
            {
              "name": "participant_id",
              "type": "Optional, String",
              "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate\ngroup)."
            },
            {
              "name": "cancel_existing",
              "type": "Optional, Boolean",
              "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group."
            }
          ],
          "description": "Reserve a time slot",
          "method": "POST",
          "endpoint": "/api/v1/calendar_events/:id/reservations\n\n"
        },
        {
          "arguments": [
            {
              "name": "calendar_event[context_code]",
              "type": "String",
              "description": "Context code of the course/group/user whose calendar this event should be\nadded to."
            },
            {
              "name": "calendar_event[title]",
              "type": "Optional, String",
              "description": "Short title for the calendar event."
            },
            {
              "name": "calendar_event[description]",
              "type": "Optional, String",
              "description": "Longer HTML description of the event."
            },
            {
              "name": "calendar_event[start_at]",
              "type": "Optional, DateTime",
              "description": "Start date/time of the event."
            },
            {
              "name": "calendar_event[end_at]",
              "type": "Optional, DateTime",
              "description": "End date/time of the event."
            },
            {
              "name": "calendar_event[location_name]",
              "type": "Optional, String",
              "description": "Location name of the event."
            },
            {
              "name": "calendar_event[location_address]",
              "type": "Optional, String",
              "description": "Location address"
            },
            {
              "name": "calendar_event[time_zone_edited]",
              "type": "Optional, String",
              "description": "Time zone of the user editing the event. Allowed time zones are\nIANA time zones or friendlier\nRuby on Rails time zones."
            },
            {
              "name": "calendar_event[child_event_data][X][start_at]",
              "type": "Optional, DateTime",
              "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at and\ncontext_code"
            },
            {
              "name": "calendar_event[child_event_data][X][end_at]",
              "type": "Optional, DateTime",
              "description": "Section-level end time(s) if this is a course event."
            },
            {
              "name": "calendar_event[child_event_data][X][context_code]",
              "type": "Optional, String",
              "description": "Context code(s) corresponding to the section-level start and end time(s)."
            }
          ],
          "description": "Update a calendar event",
          "method": "PUT",
          "endpoint": "/api/v1/calendar_events/:id"
        },
        {
          "arguments": [
            {
              "name": "cancel_reason",
              "type": "Optional, String",
              "description": "Reason for deleting/canceling the event."
            }
          ],
          "description": "Delete a calendar event",
          "method": "DELETE",
          "endpoint": "/api/v1/calendar_events/:id"
        }
      ]
    },
    {
      "name": "Content Migrations",
      "services": [
        {
          "arguments": [],
          "description": "List migration issues",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues"
        },
        {
          "arguments": [],
          "description": "Get a migration issue",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id"
        },
        {
          "arguments": [
            {
              "name": "workflow_state",
              "type": "String, \"active\"|\"resolved\"",
              "description": "Set the workflow_state of the issue."
            }
          ],
          "description": "Update a migration issue",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/content_migrations/:content_migration_id/migration_issues/:id"
        },
        {
          "arguments": [],
          "description": "List content migrations",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/content_migrations"
        },
        {
          "arguments": [],
          "description": "Get a content migration",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/content_migrations/:id"
        },
        {
          "arguments": [
            {
              "name": "migration_type",
              "type": "String",
              "description": "The type of the migration. Use the\nMigrator endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer, course_copy_importer,\nzip_file_importer, qti_converter, moodle_converter"
            },
            {
              "name": "pre_attachment[name]",
              "type": "String",
              "description": "Required if uploading a file. This is the first step in uploading a file to\nthe content migration. See the File Upload Documentation for details on the file upload workflow."
            },
            {
              "name": "pre_attachment[*]",
              "type": "Optional",
              "description": "Other file upload properties, See File Upload Documentation"
            },
            {
              "name": "settings[source_course_id]",
              "type": "Optional, String",
              "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)"
            },
            {
              "name": "settings[folder_id]",
              "type": "Optional, String",
              "description": "The folder to unzip the .zip file into for a zip_file_import."
            },
            {
              "name": "settings[overwrite_quizzes]",
              "type": "Optional, Boolean",
              "description": "Whether to overwrite quizzes with the same identifiers between content\npackages."
            },
            {
              "name": "settings[question_bank_id]",
              "type": "Optional, Integer",
              "description": "The existing question bank ID to import questions into if not specified in\nthe content package."
            },
            {
              "name": "settings[question_bank_name]",
              "type": "Optional, String",
              "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence."
            },
            {
              "name": "date_shift_options[shift_dates]",
              "type": "Optional, Boolean",
              "description": "Whether to shift dates"
            },
            {
              "name": "date_shift_options[old_start_date]",
              "type": "Optional, Date",
              "description": "The original start date of the source content/course"
            },
            {
              "name": "date_shift_options[old_end_date]",
              "type": "Optional, Date",
              "description": "The original end date of the source content/course"
            },
            {
              "name": "date_shift_options[new_start_date]",
              "type": "Optional, Date",
              "description": "The new start date for the content/course"
            },
            {
              "name": "date_shift_options[new_end_date]",
              "type": "Optional, Date",
              "description": "The new end date for the source content/course"
            },
            {
              "name": "date_shift_options[day_substitutions][X]",
              "type": "Optional, Integer",
              "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)"
            }
          ],
          "description": "Create a content migration",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/content_migrations"
        },
        {
          "arguments": [],
          "description": "Update a content migration",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/content_migrations/:id"
        },
        {
          "arguments": [],
          "description": "List Migration Systems",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/content_migrations/migrators"
        }
      ]
    },
    {
      "name": "Conversations",
      "services": [
        {
          "arguments": [
            {
              "name": "scope",
              "type": "Optional, String, \"unread\"|\"starred\"|\"archived\"",
              "description": "When set, only return conversations of the specified type. For example, set\nto \"unread\" to return only conversations that haven't been read. The\ndefault behavior is to return all non-archived conversations (i.e. read and\nunread)."
            },
            {
              "name": "filter[]",
              "type": "Optional, String, course_id|group_id|user_id",
              "description": "When set, only return conversations for the specified courses, groups or\nusers. The id should be prefixed with its type, e.g. \"user_123\" or\n\"course_456\". Can be an array (by setting \"filter[]\") or single value (by\nsetting \"filter\")"
            },
            {
              "name": "filter_mode",
              "type": "optional, \"and\"|\"or\", default \"or\"",
              "description": "When filter[] contains multiple filters, combine them with this mode,\nfiltering conversations that at have at least all of the contexts (\"and\")\nor at least one of the contexts (\"or\")"
            },
            {
              "name": "interleave_submissions",
              "type": "Boolean",
              "description": "Default is false. If true, the"
            },
            {
              "name": "include_all_conversation_ids",
              "type": "Boolean",
              "description": "Default is false. If true,"
            }
          ],
          "description": "List conversations",
          "method": "GET",
          "endpoint": "/api/v1/conversations"
        },
        {
          "arguments": [
            {
              "name": "recipients[]",
              "type": "String",
              "description": "An array of recipient ids. These may beuser ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g. recipients[]=1&recipients=2&recipients[]=course_3"
            },
            {
              "name": "subject",
              "type": "Optional, String",
              "description": "The subject of the conversation. This is ignored when reusing a\nconversation."
            },
            {
              "name": "body",
              "type": "String",
              "description": "The message to be sent"
            },
            {
              "name": "group_conversation",
              "type": "Boolean",
              "description": "Defaults to false. If true, this will be a group conversation (i.e. all\nrecipients may see all messages and replies). If false, individual private\nconversations will be started with each recipient."
            },
            {
              "name": "attachment_ids[]",
              "type": "String",
              "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder."
            },
            {
              "name": "media_comment_id",
              "type": "String",
              "description": "Media comment id of an audio of video file to be associated with this\nmessage."
            },
            {
              "name": "media_comment_type",
              "type": "String, \"audio\"|\"video\"",
              "description": "Type of the associated media file"
            },
            {
              "name": "mode",
              "type": "String, \"sync\"|\"async\"",
              "description": "Determines whether the messages will be created/sent synchronously or\nasynchronously. Defaults to sync, and this option is ignored if this is a\ngroup conversation or there is just one recipient (i.e. it must be a bulk\nprivate message). When sent async, the response will be an empty array\n(batch status can be queried via the batches API)"
            },
            {
              "name": "scope",
              "type": "Optional, String, \"unread\"|\"starred\"|\"archived\"",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "filter[]",
              "type": "Optional, String, course_id|group_id|user_id",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "filter_mode",
              "type": "optional, \"and\"|\"or\", default \"or\"",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "context_code",
              "type": "Optional, String",
              "description": "The course or group that is the context for this conversation. Same format\nas courses or groups in the recipients argument."
            }
          ],
          "description": "Create a conversation",
          "method": "POST",
          "endpoint": "/api/v1/conversations"
        },
        {
          "arguments": [],
          "description": "",
          "method": "GET",
          "endpoint": "/api/v1/conversations/batches"
        },
        {
          "arguments": [
            {
              "name": "interleave_submissions",
              "type": "Boolean",
              "description": "Default false. If true,"
            },
            {
              "name": "scope",
              "type": "Optional, String, \"unread\"|\"starred\"|\"archived\"",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "filter[]",
              "type": "Optional, String, course_id|group_id|user_id",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "filter_mode",
              "type": "optional, \"and\"|\"or\", default \"or\"",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "auto_mark_as_read",
              "type": "Boolean",
              "description": "Default true. If true, unread"
            }
          ],
          "description": "Get a single conversation",
          "method": "GET",
          "endpoint": "/api/v1/conversations/:id"
        },
        {
          "arguments": [
            {
              "name": "conversation[subject]",
              "type": "String",
              "description": "Change the subject of this conversation"
            },
            {
              "name": "conversation[workflow_state]",
              "type": "String, \"read\"|\"unread\"|\"archived\"",
              "description": "Change the state of this conversation"
            },
            {
              "name": "conversation[subscribed]",
              "type": "Boolean",
              "description": "Toggle the current user's subscription to the conversation (only valid for\ngroup conversations). If unsubscribed, the user will still have access to\nthe latest messages, but the conversation won't be automatically flagged as\nunread, nor will it jump to the top of the inbox."
            },
            {
              "name": "conversation[starred]",
              "type": "Boolean",
              "description": "Toggle the starred state of the current user's view of the conversation."
            },
            {
              "name": "scope",
              "type": "Optional, String, \"unread\"|\"starred\"|\"archived\"",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "filter[]",
              "type": "Optional, String, course_id|group_id|user_id",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            },
            {
              "name": "filter_mode",
              "type": "optional, \"and\"|\"or\", default \"or\"",
              "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the index API action"
            }
          ],
          "description": "Edit a conversation",
          "method": "PUT",
          "endpoint": "/api/v1/conversations/:id"
        },
        {
          "arguments": [],
          "description": "Mark all as read",
          "method": "POST",
          "endpoint": "/api/v1/conversations/mark_all_as_read"
        },
        {
          "arguments": [],
          "description": "Delete a conversation",
          "method": "DELETE",
          "endpoint": "/api/v1/conversations/:id"
        },
        {
          "arguments": [
            {
              "name": "recipients[]",
              "type": "String",
              "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g. recipients[]=1&recipients=2&recipients[]=course_3"
            }
          ],
          "description": "Add recipients",
          "method": "POST",
          "endpoint": "/api/v1/conversations/:id/add_recipients"
        },
        {
          "arguments": [
            {
              "name": "body",
              "type": "String",
              "description": "The message to be sent."
            },
            {
              "name": "attachment_ids[]",
              "type": "String",
              "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder."
            },
            {
              "name": "media_comment_id",
              "type": "String",
              "description": "Media comment id of an audio of video file to be associated with this\nmessage."
            },
            {
              "name": "media_comment_type",
              "type": "String, \"audio\"|\"video\"",
              "description": "Type of the associated media file."
            },
            {
              "name": "recipients[]",
              "type": "Optional, String",
              "description": ""
            },
            {
              "name": "included_messages[]",
              "type": "Optional, String",
              "description": ""
            }
          ],
          "description": "Add a message",
          "method": "POST",
          "endpoint": "/api/v1/conversations/:id/add_message"
        },
        {
          "arguments": [
            {
              "name": "remove[]",
              "type": "String",
              "description": "Array of message ids to be deleted"
            }
          ],
          "description": "Delete a message",
          "method": "POST",
          "endpoint": "/api/v1/conversations/:id/remove_messages"
        },
        {
          "arguments": [
            {
              "name": "conversation_ids[]",
              "type": "String",
              "description": "List of conversations to update. Limited to 500 conversations."
            },
            {
              "name": "event",
              "type": "String, \"mark_as_read\"|\"mark_as_unread\"|\"star\"|\"unstar\"|\"archive\"|\"destroy\"",
              "description": "The action to take on each conversation."
            }
          ],
          "description": "Batch update conversations",
          "method": "PUT",
          "endpoint": "/api/v1/conversations"
        },
        {
          "arguments": [],
          "description": "Find recipients",
          "method": "GET",
          "endpoint": "/api/v1/conversations/find_recipients"
        },
        {
          "arguments": [],
          "description": "Unread count",
          "method": "GET",
          "endpoint": "/api/v1/conversations/unread_count"
        }
      ]
    },
    {
      "name": "Courses",
      "services": [
        {
          "arguments": [
            {
              "name": "enrollment_type",
              "type": "Optional, String, \"teacher\"|\"student\"|\"ta\"|\"observer\"|\"designer\"",
              "description": "When set, only return courses where the user is enrolled as this type. For\nexample, set to \"teacher\" to return only courses where the user is enrolled\nas a Teacher.  This argument is ignored if enrollment_role is given."
            },
            {
              "name": "enrollment_role",
              "type": "Optional, String",
              "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\nAdd Role API or a base role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'."
            },
            {
              "name": "include[]",
              "type": "String, \"needs_grading_count\"|\"syllabus_body\"|\"total_scores\"|\"term\"",
              "description": ""
            },
            {
              "name": "state[]",
              "type": "Optional, String, \"unpublished\"|\"available\"|\"completed\"|\"deleted\"",
              "description": "If set, only return courses that are in the given state(s). By default,\n\"available\" is returned for students and observers, and anything except\n\"deleted\", for all other enrollment types"
            }
          ],
          "description": "List your courses",
          "method": "GET",
          "endpoint": "/api/v1/courses"
        },
        {
          "arguments": [
            {
              "name": "account_id",
              "type": "Integer",
              "description": "The unique ID of the account to create to course under."
            },
            {
              "name": "course[name]",
              "type": "Optional, String",
              "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\""
            },
            {
              "name": "course[course_code]",
              "type": "Optional, String",
              "description": "The course code for the course."
            },
            {
              "name": "course[start_at]",
              "type": "Optional, DateTime",
              "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z"
            },
            {
              "name": "course[end_at]",
              "type": "Optional, DateTime",
              "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z"
            },
            {
              "name": "course[license]",
              "type": "Optional, String",
              "description": "The name of the licensing. Should be one of the following abbreviations (a\ndescriptive name is included in parenthesis for reference):\n\n'private' (Private Copyrighted)\n\n'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n\n'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n\n'cc_by_nc' (CC Attribution Non-Commercial)\n\n'cc_by_nd' (CC Attribution No Derivatives)\n\n'cc_by_sa' (CC Attribution Share Alike)\n\n'cc_by' (CC Attribution)\n\n'public_domain' (Public Domain)."
            },
            {
              "name": "course[is_public]",
              "type": "Optional, Boolean",
              "description": "Set to true if course if public."
            },
            {
              "name": "course[public_syllabus]",
              "type": "Optional, Boolean",
              "description": "Set to true to make the course syllabus public."
            },
            {
              "name": "course[public_description]",
              "type": "Optional, String",
              "description": "A publicly visible description of the course."
            },
            {
              "name": "course[allow_student_wiki_edits]",
              "type": "Optional, Boolean",
              "description": "If true, students will be able to modify the course wiki."
            },
            {
              "name": "course[allow_wiki_comments]",
              "type": "Optional, Boolean",
              "description": "If true, course members will be able to comment on wiki pages."
            },
            {
              "name": "course[allow_student_forum_attachments]",
              "type": "Optional, Boolean",
              "description": "If true, students can attach files to forum posts."
            },
            {
              "name": "course[open_enrollment]",
              "type": "Optional, Boolean",
              "description": "Set to true if the course is open enrollment."
            },
            {
              "name": "course[self_enrollment]",
              "type": "Optional, Boolean",
              "description": "Set to true if the course is self enrollment."
            },
            {
              "name": "course[restrict_enrollments_to_course_dates]",
              "type": "Optional, Boolean",
              "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse."
            },
            {
              "name": "course[enroll_me]",
              "type": "Optional, Boolean",
              "description": "Set to true to enroll the current user as the teacher."
            },
            {
              "name": "course[sis_course_id]",
              "type": "Optional, String",
              "description": "The unique SIS identifier."
            },
            {
              "name": "course[hide_final_grades]",
              "type": "Optional, Boolean",
              "description": "If this option is set to true, the totals in student grades summary will be\nhidden."
            },
            {
              "name": "course[apply_assignment_group_weights]",
              "type": "Optional, Boolean",
              "description": "Set to true to weight final grade based on assignment groups percentages."
            },
            {
              "name": "offer",
              "type": "Optional, Boolean",
              "description": "If this option is set to true, the course will be available to students\nimmediately."
            }
          ],
          "description": "Create a new course",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/courses"
        },
        {
          "arguments": [],
          "description": "Upload a file",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/files"
        },
        {
          "arguments": [],
          "description": "List students",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/students"
        },
        {
          "arguments": [
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name or full ID of the users to match and return in the results\nlist."
            },
            {
              "name": "enrollment_type",
              "type": "Optional, String, \"teacher\"|\"student\"|\"ta\"|\"observer\"|\"designer\"",
              "description": "When set, only return users where the user is enrolled as this type. This\nargument is ignored if enrollment_role is given."
            },
            {
              "name": "enrollment_role",
              "type": "Optional, String",
              "description": "When set, only return users enrolled with the specified course-level role. \nThis can be a role created with the Add Role API or a base role type of 'StudentEnrollment',\n'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or\n'DesignerEnrollment'."
            },
            {
              "name": "include[]",
              "type": "String, \"email\"|\"enrollments\"|\"locked\"|\"avatar_url\"|\"test_student\"",
              "description": ""
            },
            {
              "name": "user_id",
              "type": "Optional, String",
              "description": "If included, the user will be queried and if the user is part of the users\nset, the page parameter will be modified so that the page containing\nuser_id will be returned."
            }
          ],
          "description": "List users in course",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/users\n\n"
        },
        {
          "arguments": [],
          "description": "List recently logged in students",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/recent_students"
        },
        {
          "arguments": [],
          "description": "",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/users/:id"
        },
        {
          "arguments": [
            {
              "name": "html",
              "description": ""
            }
          ],
          "description": "Preview processed html",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/preview_html"
        },
        {
          "arguments": [],
          "description": "Course activity stream",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/activity_stream"
        },
        {
          "arguments": [],
          "description": "Course activity stream summary",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/activity_stream/summary"
        },
        {
          "arguments": [],
          "description": "Course TODO items",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/todo"
        },
        {
          "arguments": [
            {
              "name": "event",
              "type": "String, \"delete\"|\"conclude\"",
              "description": "The action to take on the course."
            }
          ],
          "description": "Conclude a course",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:id"
        },
        {
          "arguments": [],
          "description": "Get course settings",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/settings"
        },
        {
          "arguments": [
            {
              "name": "allow_student_discussion_topics",
              "type": "Boolean",
              "description": ""
            },
            {
              "name": "allow_student_forum_attachments",
              "type": "Boolean",
              "description": ""
            },
            {
              "name": "allow_student_discussion_editing",
              "type": "Boolean",
              "description": ""
            }
          ],
          "description": "Update course settings",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/settings"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "\"all_courses\"",
              "description": "Also search recently deleted courses"
            }
          ],
          "description": "Get a single course",
          "method": "GET",
          "endpoint": "/api/v1/courses/:id\n\n"
        },
        {
          "arguments": [],
          "description": "Update a course",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:id"
        },
        {
          "arguments": [
            {
              "name": "course_ids[]",
              "description": ""
            },
            {
              "name": "event",
              "description": ""
            }
          ],
          "description": "Update courses",
          "method": "PUT",
          "endpoint": "/api/v1/accounts/:account_id/courses"
        },
        {
          "arguments": [],
          "description": "Get course copy status",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/course_copy/:id"
        },
        {
          "arguments": [
            {
              "name": "source_course",
              "type": "String",
              "description": "ID or SIS-ID of the course to copy the content from"
            },
            {
              "name": "except[]",
              "type": "String, \"course_settings\"|\"assignments\"|\"external_tools\"|\"files\"|\"topics\"|\"calendar_events\"|\"quizzes\"|\"wiki_pages\"|\"modules\"|\"outcomes\"",
              "description": "A list of the course content types to exclude, all areas not listed will be\ncopied."
            },
            {
              "name": "only[]",
              "type": "String, \"course_settings\"|\"assignments\"|\"external_tools\"|\"files\"|\"topics\"|\"calendar_events\"|\"quizzes\"|\"wiki_pages\"|\"modules\"|\"outcomes\"",
              "description": "A list of the course content types to copy, all areas not listed will not\nbe copied."
            }
          ],
          "description": "Copy course content",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/course_copy"
        }
      ]
    },
    {
      "name": "Enrollments",
      "services": [
        {
          "arguments": [
            {
              "name": "type[]",
              "type": "String",
              "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given."
            },
            {
              "name": "role[]",
              "type": "String",
              "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the Add Role API as\nwell as the base enrollment types accepted by the `type` argument above."
            },
            {
              "name": "state[]",
              "type": "String, \"active\"|\"invited\"|\"creation_pending\"|\"deleted\"|\"rejected\"|\"completed\"|\"inactive\"",
              "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned."
            }
          ],
          "description": "List enrollments",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/enrollments\n\n"
        },
        {
          "arguments": [
            {
              "name": "enrollment[user_id]",
              "type": "String",
              "description": "The ID of the user to be enrolled in the course."
            },
            {
              "name": "enrollment[type]",
              "type": "String, \"StudentEnrollment\"|\"TeacherEnrollment\"|\"TaEnrollment\"|\"ObserverEnrollment\"|\"DesignerEnrollment\"",
              "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment if supplied, otherwise\n'StudentEnrollment' will be used."
            },
            {
              "name": "enrollment[role]",
              "type": "Optional, String",
              "description": "Assigns a custom course-level role to the user."
            },
            {
              "name": "enrollment[enrollment_state]",
              "type": "Optional, String, \"active\"|\"invited\"",
              "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'"
            },
            {
              "name": "enrollment[course_section_id]",
              "type": "Optional, Integer",
              "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored."
            },
            {
              "name": "enrollment[limit_privileges_to_course_section]",
              "type": "Optional, Boolean",
              "description": "If a teacher or TA enrollment, teacher/TA will be restricted to the section\ngiven by course_section_id."
            },
            {
              "name": "enrollment[notify]",
              "type": "Optional, Boolean",
              "description": "If false, a notification will not be sent to the enrolled user.\nNotifications are sent by default."
            }
          ],
          "description": "Enroll a user",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/enrollments\n\n"
        },
        {
          "arguments": [
            {
              "name": "task",
              "type": "String, \"conclude\"|\"delete\"",
              "description": "The action to take on the enrollment."
            }
          ],
          "description": "Conclude an enrollment",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/enrollments/:id"
        }
      ]
    },
    {
      "name": "Favorites",
      "services": [
        {
          "arguments": [],
          "description": "List favorite courses",
          "method": "GET",
          "endpoint": "/api/v1/users/self/favorites/courses"
        },
        {
          "arguments": [
            {
              "name": "id",
              "type": "String",
              "description": "The ID or SIS ID of the course to add.  The current user must be registered\nin the course."
            }
          ],
          "description": "Add course to favorites",
          "method": "POST",
          "endpoint": "/api/v1/users/self/favorites/courses/:id"
        },
        {
          "arguments": [
            {
              "name": "id",
              "type": "String",
              "description": "the ID or SIS ID of the course to remove"
            }
          ],
          "description": "Remove course from favorites",
          "method": "DELETE",
          "endpoint": "/api/v1/users/self/favorites/courses/:id"
        },
        {
          "arguments": [],
          "description": "Reset course favorites",
          "method": "DELETE",
          "endpoint": "/api/v1/users/self/favorites/courses"
        }
      ]
    },
    {
      "name": "Files",
      "services": [
        {
          "arguments": [
            {
              "name": "content_types[]",
              "type": "Optional, String",
              "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.)."
            },
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name of the files to match and return."
            }
          ],
          "description": "List files",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/files\n\n"
        },
        {
          "arguments": [],
          "description": "Get file",
          "method": "GET",
          "endpoint": "/api/v1/files/:id"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "The new display name of the file"
            },
            {
              "name": "parent_folder_id",
              "type": "String",
              "description": "The id of the folder to move this file into.  The new folder must be in the\nsame context as the original parent folder.  If the file is in a context\nwithout folders this does not apply."
            },
            {
              "name": "lock_at",
              "type": "DateTime",
              "description": "The datetime to lock the file at"
            },
            {
              "name": "unlock_at",
              "type": "DateTime",
              "description": "The datetime to unlock the file at"
            },
            {
              "name": "locked",
              "type": "Boolean",
              "description": "Flag the file as locked"
            },
            {
              "name": "hidden",
              "type": "Boolean",
              "description": "Flag the file as hidden"
            }
          ],
          "description": "Update file",
          "method": "PUT",
          "endpoint": "/api/v1/files/:id"
        },
        {
          "arguments": [],
          "description": "Delete file",
          "method": "DELETE",
          "endpoint": "/api/v1/files/:id"
        },
        {
          "arguments": [],
          "description": "List folders",
          "method": "GET",
          "endpoint": "/api/v1/folders/:id/folders"
        },
        {
          "arguments": [],
          "description": "Get folder",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/folders/:id\n\n"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "The new name of the folder"
            },
            {
              "name": "parent_folder_id",
              "type": "String",
              "description": "The id of the folder to move this folder into. The new folder must be in\nthe same context as the original parent folder."
            },
            {
              "name": "lock_at",
              "type": "DateTime",
              "description": "The datetime to lock the folder at"
            },
            {
              "name": "unlock_at",
              "type": "DateTime",
              "description": "The datetime to unlock the folder at"
            },
            {
              "name": "locked",
              "type": "Boolean",
              "description": "Flag the folder as locked"
            },
            {
              "name": "hidden",
              "type": "Boolean",
              "description": "Flag the folder as hidden"
            },
            {
              "name": "position",
              "type": "Integer",
              "description": "Set an explicit sort position for the folder"
            }
          ],
          "description": "Update folder",
          "method": "PUT",
          "endpoint": "/api/v1/folders/:id"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "The name of the folder"
            },
            {
              "name": "parent_folder_id",
              "type": "String",
              "description": "The id of the folder to store the file in. If this and parent_folder_path\nare sent an error will be returned. If neither is given, a default folder\nwill be used."
            },
            {
              "name": "parent_folder_path",
              "type": "String",
              "description": "The path of the folder to store the new folder in. The path separator is\nthe forward slash `/`, never a back slash. The parent folder will be\ncreated if it does not already exist. This parameter only applies to new\nfolders in a context that has folders, such as a user, a course, or a\ngroup. If this and parent_folder_id are sent an error will be returned. If\nneither is given, a default folder will be used."
            },
            {
              "name": "lock_at",
              "type": "DateTime",
              "description": "The datetime to lock the folder at"
            },
            {
              "name": "unlock_at",
              "type": "DateTime",
              "description": "The datetime to unlock the folder at"
            },
            {
              "name": "locked",
              "type": "Boolean",
              "description": "Flag the folder as locked"
            },
            {
              "name": "hidden",
              "type": "Boolean",
              "description": "Flag the folder as hidden"
            },
            {
              "name": "position",
              "type": "Integer",
              "description": "Set an explicit sort position for the folder"
            }
          ],
          "description": "Create folder",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/folders\n\n"
        },
        {
          "arguments": [
            {
              "name": "force",
              "type": "Boolean",
              "description": "Set to 'true' to allow deleting a non-empty folder"
            }
          ],
          "description": "Delete folder",
          "method": "DELETE",
          "endpoint": "/api/v1/folders/:id"
        },
        {
          "arguments": [],
          "description": "Upload a file",
          "method": "POST",
          "endpoint": "/api/v1/folders/:folder_id/files"
        }
      ]
    },
    {
      "name": "External Tools",
      "services": [
        {
          "arguments": [
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name of the tools to match and return."
            }
          ],
          "description": "List external tools",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/external_tools\n\n"
        },
        {
          "arguments": [
            {
              "name": "id",
              "type": "Optional, String",
              "description": "The external id of the tool to launch."
            },
            {
              "name": "url",
              "type": "Optional, String",
              "description": "The LTI launch url for the external tool."
            },
            {
              "name": "assignment_id",
              "type": "Optional, String",
              "description": "The assignment id for an assignment launch."
            },
            {
              "name": "launch_type",
              "type": "Optional, String",
              "description": "The type of launch to perform on the external tool."
            }
          ],
          "description": "Get a sessionless launch url for an external tool.",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/external_tools/sessionless_launch\n\n"
        },
        {
          "arguments": [],
          "description": "Get a single external tool",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/external_tools/:external_tool_id\n\n"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "The name of the tool"
            },
            {
              "name": "privacy_level",
              "type": "String, \"anonymous\"|\"name_only\"|\"public\"",
              "description": "What information to send to the external tool."
            },
            {
              "name": "consumer_key",
              "type": "String",
              "description": "The consumer key for the external tool"
            },
            {
              "name": "shared_secret",
              "type": "String",
              "description": "The shared secret with the external tool"
            },
            {
              "name": "description",
              "type": "Optional, String",
              "description": "A description of the tool"
            },
            {
              "name": "url",
              "type": "Optional, String",
              "description": "The url to match links against. Either \"url\" or \"domain\" should be set, not\nboth."
            },
            {
              "name": "domain",
              "type": "Optional, String",
              "description": "The domain to match links against. Either \"url\" or \"domain\" should be set,\nnot both."
            },
            {
              "name": "icon_url",
              "type": "Optional, String",
              "description": "The url of the icon to show for this tool"
            },
            {
              "name": "text",
              "type": "Optional, String",
              "description": "The default text to show for this tool"
            },
            {
              "name": "custom_fields",
              "type": "Optional, String",
              "description": "Custom fields that will be sent to the tool consumer, specified as custom_fields"
            },
            {
              "name": "account_navigation[url]",
              "type": "Optional, String",
              "description": "The url of the external tool for account navigation"
            },
            {
              "name": "account_navigation[enabled]",
              "type": "Optional, Boolean",
              "description": "Set this to enable this feature"
            },
            {
              "name": "account_navigation[text]",
              "type": "Optional, String",
              "description": "The text that will show on the left-tab in the account navigation"
            },
            {
              "name": "user_navigation[url]",
              "type": "Optional, String",
              "description": "The url of the external tool for user navigation"
            },
            {
              "name": "user_navigation[enabled]",
              "type": "Optional, Boolean",
              "description": "Set this to enable this feature"
            },
            {
              "name": "user_navigation[text]",
              "type": "Optional, String",
              "description": "The text that will show on the left-tab in the user navigation"
            },
            {
              "name": "course_navigation[url]",
              "type": "Optional, String",
              "description": "The url of the external tool for course navigation"
            },
            {
              "name": "course_navigation[enabled]",
              "type": "Optional, Boolean",
              "description": "Set this to enable this feature"
            },
            {
              "name": "course_navigation[text]",
              "type": "Optional, String",
              "description": "The text that will show on the left-tab in the course navigation"
            },
            {
              "name": "course_navigation[visibility]",
              "type": "Optional, String, \"admins\"|\"members\"",
              "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, null for everyone"
            },
            {
              "name": "course_navigation[default]",
              "type": "Optional, Boolean",
              "description": "Whether the navigation option will show in the course by default or whether\nthe teacher will have to explicitly enable it"
            },
            {
              "name": "editor_button[url]",
              "type": "Optional, String",
              "description": "The url of the external tool"
            },
            {
              "name": "editor_button[enabled]",
              "type": "Optional, Boolean",
              "description": "Set this to enable this feature"
            },
            {
              "name": "editor_button[icon_url]",
              "type": "Optional, String",
              "description": "The url of the icon to show in the WYSIWYG editor"
            },
            {
              "name": "editor_button[selection_width]",
              "type": "Optional, String",
              "description": "The width of the dialog the tool is launched in"
            },
            {
              "name": "editor_button[selection_height]",
              "type": "Optional, String",
              "description": "The height of the dialog the tool is launched in"
            },
            {
              "name": "resource_selection[url]",
              "type": "Optional, String",
              "description": "The url of the external tool"
            },
            {
              "name": "resource_selection[enabled]",
              "type": "Optional, Boolean",
              "description": "Set this to enable this feature"
            },
            {
              "name": "resource_selection[icon_url]",
              "type": "Optional, String",
              "description": "The url of the icon to show in the module external tool list"
            },
            {
              "name": "resource_selection[selection_width]",
              "type": "Optional, String",
              "description": "The width of the dialog the tool is launched in"
            },
            {
              "name": "resource_selection[selection_height]",
              "type": "Optional, String",
              "description": "The height of the dialog the tool is launched in"
            },
            {
              "name": "config_type",
              "type": "Optional, String",
              "description": "Configuration can be passed in as CC xml instead of using query parameters.\nIf this value is \"by_url\" or \"by_xml\" then an xml configuration will be\nexpected in either the \"config_xml\" or \"config_url\" parameter. Note that\nthe name parameter overrides the tool name provided in the xml"
            },
            {
              "name": "config_xml",
              "type": "Optional, String",
              "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\""
            },
            {
              "name": "config_url",
              "type": "Optional, String",
              "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\""
            }
          ],
          "description": "Create an external tool",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/external_tools\n\n"
        },
        {
          "arguments": [],
          "description": "Edit an external tool",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/external_tools/:external_tool_id\n\n"
        },
        {
          "arguments": [],
          "description": "Delete an external tool",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/external_tools/:external_tool_id\n\n"
        }
      ]
    },
    {
      "name": "Group Categories",
      "services": [
        {
          "arguments": [],
          "description": "List group categories for a context",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/group_categories\n\n"
        },
        {
          "arguments": [],
          "description": "Get a single group category",
          "method": "GET",
          "endpoint": "/api/v1/group_categories/:group_category_id"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "Name of the group category"
            },
            {
              "name": "self_signup",
              "type": "Optional, \"enabled\"|\"restricted\"",
              "description": "Allow students to sign up for a group themselves (Course Only). valid\nvalues are:\n\"enabled\"\n\nallows students to self sign up for any group in course\n\"restricted\"\n\nallows students to self sign up only for groups in the same section null\ndisallows self sign up\n\n\nallows students to self sign up for any group in course\n\nallows students to self sign up only for groups in the same section null\ndisallows self sign up"
            },
            {
              "name": "group_limit",
              "type": "Optional",
              "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup."
            },
            {
              "name": "create_group_count",
              "type": "Optional",
              "description": "Create this number of groups (Course Only)."
            },
            {
              "name": "split_group_count",
              "type": "Optional",
              "description": "(Deprecated)"
            }
          ],
          "description": "Create a Group Category",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/group_categories\n\n"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "Name of the group category"
            },
            {
              "name": "self_signup",
              "type": "Optional, \"enabled\"|\"restricted\"",
              "description": "Allow students to sign up for a group themselves (Course Only). Valid\nvalues are:\n\"enabled\"\n\nallows students to self sign up for any group in course\n\"restricted\"\n\nallows students to self sign up only for groups in the same section null\ndisallows self sign up\n\n\nallows students to self sign up for any group in course\n\nallows students to self sign up only for groups in the same section null\ndisallows self sign up"
            },
            {
              "name": "group_limit",
              "type": "Optional",
              "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup."
            },
            {
              "name": "create_group_count",
              "type": "Optional",
              "description": "Create this number of groups (Course Only)."
            },
            {
              "name": "split_group_count",
              "type": "Optional",
              "description": "(Deprecated)"
            }
          ],
          "description": "Update a Group Category",
          "method": "PUT",
          "endpoint": "/api/v1/group_categories/:group_category_id"
        },
        {
          "arguments": [],
          "description": "Delete a Group Category",
          "method": "DELETE",
          "endpoint": "/api/v1/group_categories/:group_category_id"
        },
        {
          "arguments": [],
          "description": "List groups in group category",
          "method": "GET",
          "endpoint": "/api/v1/group_categories/:group_category_id/groups"
        },
        {
          "arguments": [
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name or full ID of the users to match and return in the results\nlist. Must be at least 3 characters."
            },
            {
              "name": "unassigned",
              "type": "Optional, Boolean",
              "description": "Set this value to true if you wish only to search unassigned users in the\ngroup category."
            }
          ],
          "description": "List users in group category",
          "method": "GET",
          "endpoint": "/api/v1/group_categories/:group_category_id/users"
        },
        {
          "arguments": [
            {
              "name": "sync",
              "type": "Optional, Boolean",
              "description": "The assigning is done asynchronously by default. If you would like to\noverride this and have the assigning done synchronously, set this value to\ntrue."
            }
          ],
          "description": "Assign unassigned members",
          "method": "POST",
          "endpoint": "/api/v1/group_categories/:group_category_id/assign_unassigned_members"
        }
      ]
    },
    {
      "name": "Discussion Topics",
      "services": [
        {
          "arguments": [
            {
              "name": "order_by",
              "type": "String, \"position\"|\"recent_activity\"",
              "description": "Determines the order of the discussion topic list. Defaults to \"position\"."
            },
            {
              "name": "scope",
              "type": "Optional, String, \"locked\"|\"unlocked\"",
              "description": "Only return discussion topics in the given state. Defaults to including\nlocked and unlocked topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered"
            },
            {
              "name": "only_announcements",
              "type": "Optional, Boolean",
              "description": "Return announcements instead of discussion topics. Defaults to false"
            },
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial title of the discussion topics to match and return."
            }
          ],
          "description": "List discussion topics",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics\n\n"
        },
        {
          "arguments": [
            {
              "name": "title",
              "type": "String",
              "description": ""
            },
            {
              "name": "message",
              "type": "String",
              "description": ""
            },
            {
              "name": "discussion_type",
              "type": "String",
              "description": ""
            },
            {
              "name": "published",
              "type": "Optional, Boolean",
              "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics."
            },
            {
              "name": "delayed_post_at",
              "type": "Optional, DateTime",
              "description": "If a timestamp is given, the topic will not be published until that time."
            },
            {
              "name": "lock_at",
              "type": "Optional, DateTime",
              "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked."
            },
            {
              "name": "podcast_enabled",
              "type": "Boolean",
              "description": "If true, the topic will have an associated podcast feed."
            },
            {
              "name": "podcast_has_student_posts",
              "type": "Boolean",
              "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled."
            },
            {
              "name": "require_initial_post",
              "type": "Boolean",
              "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false."
            },
            {
              "name": "assignment",
              "type": "Assignment",
              "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the Create an Assignment API for the available parameters. The name parameter will be\nignored, as it's taken from the discussion title. If you want to make a\ndiscussion that was an assignment NOT an assignment, pass set_assignment =\nfalse as part of the assignment object"
            },
            {
              "name": "is_announcement",
              "type": "Boolean",
              "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions."
            },
            {
              "name": "position_after",
              "type": "String",
              "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed."
            }
          ],
          "description": "Create a new discussion topic",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics\n\n"
        },
        {
          "arguments": [],
          "description": "Update a topic",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id\n\n"
        },
        {
          "arguments": [],
          "description": "Delete a topic",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id\n\n"
        },
        {
          "arguments": [
            {
              "name": "message",
              "type": "String",
              "description": "The updated body of the entry."
            }
          ],
          "description": "Update an entry",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id\n\n"
        },
        {
          "arguments": [],
          "description": "Delete an entry",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:id\n\n"
        },
        {
          "arguments": [],
          "description": "Get a single topic",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id\n\n"
        },
        {
          "arguments": [],
          "description": "Get the full topic",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/view\n\n"
        },
        {
          "arguments": [
            {
              "name": "message",
              "type": "String",
              "description": "The body of the entry."
            },
            {
              "name": "attachment",
              "type": "Optional",
              "description": "a multipart/form-data form-field-style"
            }
          ],
          "description": "Post an entry",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries\n\n"
        },
        {
          "arguments": [],
          "description": "List topic entries",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries\n\n"
        },
        {
          "arguments": [
            {
              "name": "message",
              "type": "String",
              "description": "The body of the entry."
            },
            {
              "name": "attachment",
              "type": "Optional",
              "description": "a multipart/form-data form-field-style"
            }
          ],
          "description": "Post a reply",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies\n\n"
        },
        {
          "arguments": [],
          "description": "List entry replies",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/replies\n\n"
        },
        {
          "arguments": [
            {
              "name": "ids[]",
              "type": "String",
              "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first."
            }
          ],
          "description": "List entries",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entry_list\n\n"
        },
        {
          "arguments": [],
          "description": "Mark topic as read",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/read\n\n"
        },
        {
          "arguments": [],
          "description": "Mark topic as unread",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/read\n\n"
        },
        {
          "arguments": [
            {
              "name": "forced_read_state",
              "type": "Optional, Boolean",
              "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified."
            }
          ],
          "description": "Mark all entries as read",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all\n\n"
        },
        {
          "arguments": [
            {
              "name": "forced_read_state",
              "type": "Optional, Boolean",
              "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified."
            }
          ],
          "description": "Mark all entries as unread",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/read_all\n\n"
        },
        {
          "arguments": [
            {
              "name": "forced_read_state",
              "type": "Optional, Boolean",
              "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
            }
          ],
          "description": "Mark entry as read",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read\n\n"
        },
        {
          "arguments": [
            {
              "name": "forced_read_state",
              "type": "Optional, Boolean",
              "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified."
            }
          ],
          "description": "Mark entry as unread",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/entries/:entry_id/read\n\n"
        },
        {
          "arguments": [],
          "description": "Subscribe to a topic",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed\n\n"
        },
        {
          "arguments": [],
          "description": "Unsubscribe from a topic",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/discussion_topics/:topic_id/subscribed\n\n"
        }
      ]
    },
    {
      "name": "Gradebook History",
      "services": [
        {
          "arguments": [
            {
              "name": "course_id",
              "type": "Integer",
              "description": "The id of the contextual course for this API call"
            }
          ],
          "description": "Days in gradebook history for this course",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/gradebook_history/days"
        },
        {
          "arguments": [
            {
              "name": "course_id",
              "type": "Integer",
              "description": "The id of the contextual course for this API call"
            },
            {
              "name": "date",
              "type": "String",
              "description": "The date for which you would like to see detailed information"
            }
          ],
          "description": "Details for a given date in gradebook history for this course",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/gradebook_history/:date"
        },
        {
          "arguments": [
            {
              "name": "course_id",
              "type": "Integer",
              "description": "The id of the contextual course for this API call"
            },
            {
              "name": "date",
              "type": "String",
              "description": "The date for which you would like to see submissions"
            },
            {
              "name": "grader_id",
              "type": "Integer",
              "description": "The ID of the grader for which you want to see submissions"
            },
            {
              "name": "assignment_id",
              "type": "Integer",
              "description": "The ID of the assignment for which you want to see submissions"
            }
          ],
          "description": "Lists submissions",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/gradebook_history/:date/graders/:grader_id/assignments/:assignment_id/submissions"
        },
        {
          "arguments": [
            {
              "name": "course_id",
              "type": "Integer",
              "description": "The id of the contextual course for this API call"
            },
            {
              "name": "assignment_id",
              "type": "Optional, Integer",
              "description": "The ID of the assignment for which you want to see submissions. If absent,\nversions of submissions from any assignment in the course are included."
            },
            {
              "name": "user_id",
              "type": "Optional, Integer",
              "description": "The ID of the user for which you want to see submissions. If absent,\nversions of submissions from any user in the course are included."
            },
            {
              "name": "ascending",
              "type": "Optional, Boolean",
              "description": "Returns submission versions in ascending date order (oldest first). If\nabsent, returns submission versions in descending date order (newest\nfirst)."
            }
          ],
          "description": "List uncollated submission versions",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/gradebook_history/feed"
        }
      ]
    },
    {
      "name": "Groups",
      "services": [
        {
          "arguments": [
            {
              "name": "context_type",
              "type": "Optional, String, \"Account\"|\"Course\"",
              "description": "Only include groups that are in this type of context."
            }
          ],
          "description": "List your groups",
          "method": "GET",
          "endpoint": "/api/v1/users/self/groups"
        },
        {
          "arguments": [],
          "description": "List the groups available in a context.",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/groups\n\n"
        },
        {
          "arguments": [],
          "description": "Get a single group",
          "method": "GET",
          "endpoint": "/api/v1/groups/:group_id"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "The name of the group"
            },
            {
              "name": "description",
              "type": "String",
              "description": "A description of the group"
            },
            {
              "name": "is_public",
              "type": "Boolean",
              "description": "whether the group is public (applies only to community groups)"
            },
            {
              "name": "join_level",
              "type": "String, \"parent_context_auto_join\"|\"parent_context_request\"|\"invitation_only\"",
              "description": ""
            },
            {
              "name": "storage_quota_mb",
              "type": "Integer",
              "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission."
            }
          ],
          "description": "Create a group",
          "method": "POST",
          "endpoint": "/api/v1/groups\n\n"
        },
        {
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "description": "The name of the group"
            },
            {
              "name": "description",
              "type": "String",
              "description": "A description of the group"
            },
            {
              "name": "is_public",
              "type": "Boolean",
              "description": "Whether the group is public (applies only to community groups). Currently\nyou cannot set a group back to private once it has been made public."
            },
            {
              "name": "join_level",
              "type": "String, \"parent_context_auto_join\"|\"parent_context_request\"|\"invitation_only\"",
              "description": ""
            },
            {
              "name": "avatar_id",
              "type": "Integer",
              "description": "The id of the attachment previously uploaded to the group that you would\nlike to use as the avatar image for this group."
            },
            {
              "name": "storage_quota_mb",
              "type": "Integer",
              "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission."
            }
          ],
          "description": "Edit a group",
          "method": "PUT",
          "endpoint": "/api/v1/groups/:group_id"
        },
        {
          "arguments": [],
          "description": "Delete a group",
          "method": "DELETE",
          "endpoint": "/api/v1/groups/:group_id"
        },
        {
          "arguments": [],
          "description": "Follow a group",
          "method": "PUT",
          "endpoint": "/api/v1/groups/:group_id/followers/self"
        },
        {
          "arguments": [],
          "description": "Un-follow a group",
          "method": "DELETE",
          "endpoint": "/api/v1/groups/:group_id/followers/self"
        },
        {
          "arguments": [
            {
              "name": "invitees[]",
              "type": "String",
              "description": "An array of email addresses to be sent invitations."
            }
          ],
          "description": "Invite others to a group",
          "method": "POST",
          "endpoint": "/api/v1/groups/:group_id/invite"
        },
        {
          "arguments": [
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name or full ID of the users to match and return in the results\nlist. Must be at least 3 characters."
            }
          ],
          "description": "List group's users",
          "method": "GET",
          "endpoint": "/api/v1/groups/:group_id/users"
        },
        {
          "arguments": [],
          "description": "Upload a file",
          "method": "POST",
          "endpoint": "/api/v1/groups/:group_id/files"
        },
        {
          "arguments": [
            {
              "name": "html",
              "type": "String",
              "description": "The html content to process"
            }
          ],
          "description": "Preview processed html",
          "method": "POST",
          "endpoint": "/api/v1/groups/:group_id/preview_html"
        },
        {
          "arguments": [],
          "description": "Group activity stream",
          "method": "GET",
          "endpoint": "/api/v1/groups/:group_id/activity_stream"
        },
        {
          "arguments": [],
          "description": "Group activity stream summary",
          "method": "GET",
          "endpoint": "/api/v1/groups/:group_id/activity_stream/summary"
        },
        {
          "arguments": [
            {
              "name": "filter_states[]",
              "type": "Optional, String, \"accepted\"|\"invited\"|\"requested\"",
              "description": "Only list memberships with the given workflow_states. By default it will\nreturn all memberships."
            }
          ],
          "description": "List group memberships",
          "method": "GET",
          "endpoint": "/api/v1/groups/:group_id/memberships\n\n"
        },
        {
          "arguments": [
            {
              "name": "user_id",
              "type": "String",
              "description": ""
            }
          ],
          "description": "Create a membership",
          "method": "POST",
          "endpoint": "/api/v1/groups/:group_id/memberships"
        },
        {
          "arguments": [
            {
              "name": "workflow_state",
              "type": "Optional, String, \"accepted\"",
              "description": "Currently, the only allowed value is \"accepted\""
            },
            {
              "name": "moderator",
              "description": ""
            }
          ],
          "description": "Update a membership",
          "method": "PUT",
          "endpoint": "/api/v1/groups/:group_id/memberships/:membership_id\n\n"
        },
        {
          "arguments": [],
          "description": "Leave a group",
          "method": "DELETE",
          "endpoint": "/api/v1/groups/:group_id/memberships/:membership_id\n\n"
        }
      ]
    },
    {
      "name": "Outcome Groups",
      "services": [
        {
          "arguments": [],
          "description": "Redirect to root outcome group for context",
          "method": "GET",
          "endpoint": "/api/v1/global/root_outcome_group\n\n"
        },
        {
          "arguments": [],
          "description": "Show an outcome group",
          "method": "GET",
          "endpoint": "/api/v1/global/outcome_groups/:id\n\n"
        },
        {
          "arguments": [
            {
              "name": "title",
              "type": "Optional, String",
              "description": "The new outcome group title."
            },
            {
              "name": "description",
              "type": "Optional, String",
              "description": "The new outcome group description."
            },
            {
              "name": "vendor_guid",
              "type": "Optional, String",
              "description": "A custom GUID for the learning standard."
            },
            {
              "name": "parent_outcome_group_id",
              "type": "Optional, Integer",
              "description": "The id of the new parent outcome group."
            }
          ],
          "description": "Update an outcome group",
          "method": "PUT",
          "endpoint": "/api/v1/global/outcome_groups/:id\n\n"
        },
        {
          "arguments": [],
          "description": "Delete an outcome group",
          "method": "DELETE",
          "endpoint": "/api/v1/global/outcome_groups/:id\n\n"
        },
        {
          "arguments": [],
          "description": "List linked outcomes",
          "method": "GET",
          "endpoint": "/api/v1/global/outcome_groups/:id/outcomes\n\n"
        },
        {
          "arguments": [
            {
              "name": "outcome_id",
              "type": "Optional, Integer",
              "description": "The ID of the existing outcome to link."
            },
            {
              "name": "title",
              "type": "Optional, String",
              "description": "The title of the new outcome. Required if outcome_id is absent."
            },
            {
              "name": "description",
              "type": "Optional, String",
              "description": "The description of the new outcome."
            },
            {
              "name": "vendor_guid",
              "type": "Optional, String",
              "description": "A custom GUID for the learning standard."
            },
            {
              "name": "mastery_points",
              "type": "Optional, Integer",
              "description": "The mastery threshold for the embedded rubric criterion."
            },
            {
              "name": "ratings[][description]",
              "type": "Optional, String",
              "description": "The description of a rating level for the embedded rubric criterion."
            },
            {
              "name": "ratings[][points]",
              "type": "Optional, Integer",
              "description": "The points corresponding to a rating level for the embedded rubric\ncriterion."
            }
          ],
          "description": "Create/link an outcome",
          "method": "POST",
          "endpoint": "/api/v1/global/outcome_groups/:id/outcomes\n\n"
        },
        {
          "arguments": [],
          "description": "Unlink an outcome",
          "method": "DELETE",
          "endpoint": "/api/v1/global/outcome_groups/:id/outcomes/:outcome_id\n\n"
        },
        {
          "arguments": [],
          "description": "List subgroups",
          "method": "GET",
          "endpoint": "/api/v1/global/outcome_groups/:id/subgroups\n\n"
        },
        {
          "arguments": [
            {
              "name": "title",
              "type": "String",
              "description": "The title of the new outcome group."
            },
            {
              "name": "description",
              "type": "Optional, String",
              "description": "The description of the new outcome group."
            },
            {
              "name": "vendor_guid",
              "type": "Optional, String",
              "description": "A custom GUID for the learning standard"
            }
          ],
          "description": "Create a subgroup",
          "method": "POST",
          "endpoint": "/api/v1/global/outcome_groups/:id/subgroups\n\n"
        },
        {
          "arguments": [
            {
              "name": "source_outcome_group_id",
              "type": "Integer",
              "description": "The ID of the source outcome group."
            }
          ],
          "description": "Import an outcome group",
          "method": "POST",
          "endpoint": "/api/v1/global/outcome_groups/:id/import\n\n"
        }
      ]
    },
    {
      "name": "Outcomes",
      "services": [
        {
          "arguments": [],
          "description": "Show an outcome",
          "method": "GET",
          "endpoint": "/api/v1/outcomes/:id"
        },
        {
          "arguments": [
            {
              "name": "title",
              "type": "Optional, String",
              "description": "The new outcome title."
            },
            {
              "name": "description",
              "type": "Optional, String",
              "description": "The new outcome description."
            },
            {
              "name": "vendor_guid",
              "type": "Optional, String",
              "description": "A custom GUID for the learning standard."
            },
            {
              "name": "mastery_points",
              "type": "Optional, Integer",
              "description": "The new mastery threshold for the embedded rubric criterion."
            },
            {
              "name": "ratings[][description]",
              "type": "Optional, String",
              "description": "The description of a new rating level for the embedded rubric criterion."
            },
            {
              "name": "ratings[][points]",
              "type": "Optional, Integer",
              "description": "The points corresponding to a new rating level for the embedded rubric\ncriterion."
            }
          ],
          "description": "Update an outcome",
          "method": "PUT",
          "endpoint": "/api/v1/outcomes/:id"
        }
      ]
    },
    {
      "name": "Logins",
      "services": [
        {
          "arguments": [
            {
              "name": "user[id]",
              "type": "String",
              "description": "The ID of the user to search on."
            }
          ],
          "description": "List user logins",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/logins\n\n"
        },
        {
          "arguments": [
            {
              "name": "user[id]",
              "type": "String",
              "description": "The ID of the user to create the login for."
            },
            {
              "name": "login[unique_id]",
              "type": "String",
              "description": "The unique ID for the new login."
            },
            {
              "name": "login[password]",
              "type": "String",
              "description": "The new login's password."
            },
            {
              "name": "login[sis_user_id]",
              "type": "String",
              "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account."
            }
          ],
          "description": "Create a user login",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/logins"
        },
        {
          "arguments": [
            {
              "name": "login[unique_id]",
              "type": "String",
              "description": "The new unique ID for the login."
            },
            {
              "name": "login[password]",
              "type": "String",
              "description": "The new password for the login. Can only be set by an admin user if admins\nare allowed to change passwords for the account."
            },
            {
              "name": "login[sis_user_id]",
              "type": "String",
              "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account."
            }
          ],
          "description": "Edit a user login",
          "method": "PUT",
          "endpoint": "/api/v1/accounts/:account_id/logins/:id"
        },
        {
          "arguments": [],
          "description": "Delete a user login",
          "method": "DELETE",
          "endpoint": "/api/v1/users/:user_id/logins/:id"
        }
      ]
    },
    {
      "name": "Progress",
      "services": [
        {
          "arguments": [],
          "description": "Query progress",
          "method": "GET",
          "endpoint": "/api/v1/progress/:id"
        }
      ]
    },
    {
      "name": "Modules",
      "services": [
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"items\"|\"content_details\"",
              "description": ""
            },
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name of the modules (and module items, if include is specified) to match and return."
            },
            {
              "name": "student_id",
              "type": "Optional",
              "description": "Returns module completion information for the student with this id."
            }
          ],
          "description": "List modules",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/modules"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"items\"|\"content_details\"",
              "description": ""
            },
            {
              "name": "student_id",
              "type": "Optional",
              "description": "Returns module completion information for the student with this id."
            }
          ],
          "description": "Show module",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/modules/:id"
        },
        {
          "arguments": [
            {
              "name": "module[name]",
              "type": "String",
              "description": "The name of the module"
            },
            {
              "name": "module[unlock_at]",
              "type": "Optional, DateTime",
              "description": "The date the module will unlock"
            },
            {
              "name": "module[position]",
              "type": "Optional, Integer",
              "description": "The position of this module in the course (1-based)"
            },
            {
              "name": "module[require_sequential_progress]",
              "type": "Optional, Boolean",
              "description": "Whether module items must be unlocked in order"
            },
            {
              "name": "module[prerequisite_module_ids][]",
              "type": "Optional, String",
              "description": "IDs of Modules that must be completed before this one is unlocked.\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored"
            }
          ],
          "description": "Create a module",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/modules"
        },
        {
          "arguments": [
            {
              "name": "module[name]",
              "type": "Optional, String",
              "description": "The name of the module"
            },
            {
              "name": "module[unlock_at]",
              "type": "Optional, DateTime",
              "description": "The date the module will unlock"
            },
            {
              "name": "module[position]",
              "type": "Optional, Integer",
              "description": "The position of the module in the course (1-based)"
            },
            {
              "name": "module[require_sequential_progress]",
              "type": "Optional, Boolean",
              "description": "Whether module items must be unlocked in order"
            },
            {
              "name": "module[prerequisite_module_ids][]",
              "type": "Optional, String",
              "description": "IDs of Modules that must be completed before this one is unlocked\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored"
            },
            {
              "name": "module[published]",
              "type": "Optional, Boolean",
              "description": "Whether the module is published and visible to students"
            }
          ],
          "description": "Update a module",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/modules/:id"
        },
        {
          "arguments": [],
          "description": "Delete module",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/modules/:id"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"content_details\"",
              "description": "If included, will return additional details specific to the content\nassociated with each item. Refer to the Module Item specification for more details."
            },
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial title of the items to match and return."
            },
            {
              "name": "student_id",
              "type": "Optional",
              "description": "Returns module completion information for the student with this id."
            }
          ],
          "description": "List module items",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/modules/:module_id/items"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"content_details\"",
              "description": "If included, will return additional details specific to the content\nassociated with this item. Refer to the Module Item specification for more details."
            },
            {
              "name": "student_id",
              "type": "Optional",
              "description": "Returns module completion information for the student with this id."
            }
          ],
          "description": "Show module item",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/modules/:module_id/items/:id"
        },
        {
          "arguments": [
            {
              "name": "module_item[title]",
              "type": "Optional, String",
              "description": "The name of the module item and associated content"
            },
            {
              "name": "module_item[type]",
              "type": "String, \"File\"|\"Page\"|\"Discussion\"|\"Assignment\"|\"Quiz\"|\"SubHeader\"|\"ExternalUrl\"|\"ExternalTool\"",
              "description": "The type of content linked to the item"
            },
            {
              "name": "module_item[content_id]",
              "type": "String",
              "description": "The id of the content to link to the module item. Required, except for\n'ExternalUrl', 'Page', and 'SubHeader' types."
            },
            {
              "name": "module_item[position]",
              "type": "Optional, Integer",
              "description": "The position of this item in the module (1-based)."
            },
            {
              "name": "module_item[indent]",
              "type": "Optional, Integer",
              "description": "0-based indent level; module items may be indented to show a hierarchy"
            },
            {
              "name": "module_item[page_url]",
              "type": "String",
              "description": "Suffix for the linked wiki page (e.g. 'front-page'). Required for 'Page'\ntype."
            },
            {
              "name": "module_item[external_url]",
              "type": "String",
              "description": "External url that the item points to. [Required for 'ExternalUrl' and\n'ExternalTool' types."
            },
            {
              "name": "module_item[new_tab]",
              "type": "Optional, Boolean",
              "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type."
            },
            {
              "name": "module_item[completion_requirement][type]",
              "type": "Optional, String, \"must_view\"|\"must_contribute\"|\"must_submit\"",
              "description": "Completion requirement for this module item. \"must_view\": Applies to all\nitem types \"must_contribute\": Only applies to \"Assignment\", \"Discussion\",\nand \"Page\" types \"must_submit\", \"min_score\": Only apply to \"Assignment\" and\n\"Quiz\" types Inapplicable types will be ignored"
            },
            {
              "name": "module_item[completion_requirement][min_score]",
              "type": "Integer",
              "description": "Minimum score required to complete. Required for completion_requirement\ntype 'min_score'."
            }
          ],
          "description": "Create a module item",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/modules/:module_id/items"
        },
        {
          "arguments": [
            {
              "name": "module_item[title]",
              "type": "Optional, String",
              "description": "The name of the module item"
            },
            {
              "name": "module_item[position]",
              "type": "Optional, Integer",
              "description": "The position of this item in the module (1-based)"
            },
            {
              "name": "module_item[indent]",
              "type": "Optional, Integer",
              "description": "0-based indent level; module items may be indented to show a hierarchy"
            },
            {
              "name": "module_item[external_url]",
              "type": "Optional, String",
              "description": "External url that the item points to. Only applies to 'ExternalUrl' type."
            },
            {
              "name": "module_item[new_tab]",
              "type": "Optional, Boolean",
              "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type."
            },
            {
              "name": "module_item[completion_requirement][type]",
              "type": "Optional, \"must_view\"|\"must_contribute\"|\"must_submit\"",
              "description": "Completion requirement for this module item. \"must_view\": Applies to all\nitem types \"must_contribute\": Only applies to \"Assignment\", \"Discussion\",\nand \"Page\" types \"must_submit\", \"min_score\": Only apply to \"Assignment\" and\n\"Quiz\" types Inapplicable types will be ignored"
            },
            {
              "name": "module_item[completion_requirement][min_score]",
              "type": "Integer",
              "description": "Minimum score required to complete, Required for completion_requirement\ntype 'min_score'."
            },
            {
              "name": "module_item[published]",
              "type": "Optional, Boolean",
              "description": "Whether the module item is published and visible to students."
            },
            {
              "name": "module_item[module_id]",
              "type": "Optional, String",
              "description": "Move this item to another module by specifying the target module id here.\nThe target module must be in the same course."
            }
          ],
          "description": "Update a module item",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/modules/:module_id/items/:id"
        },
        {
          "arguments": [],
          "description": "Delete module item",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/modules/:module_id/items/:id"
        },
        {
          "arguments": [
            {
              "name": "asset_type",
              "type": "String, \"ModuleItem\"|\"File\"|\"Page\"|\"Discussion\"|\"Assignment\"|\"Quiz\"|\"ExternalTool\"",
              "description": "The type of asset to find module sequence information for. Use the\nModuleItem if it is known (e.g., the user navigated from a module item),\nsince this will avoid ambiguity if the asset appears more than once in the\nmodule sequence."
            },
            {
              "name": "asset_id",
              "type": "Integer",
              "description": "The id of the asset (or the url in the case of a Page)"
            }
          ],
          "description": "Get module item sequence",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/module_item_sequence"
        }
      ]
    },
    {
      "name": "SIS Imports",
      "services": [
        {
          "arguments": [
            {
              "name": "import_type",
              "type": "Optional, String",
              "description": "Choose the data format for reading SIS data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided, will\nbe assumed to be so. Can be part of the query string."
            },
            {
              "name": "attachment",
              "description": ""
            },
            {
              "name": "extension",
              "description": ""
            },
            {
              "name": "batch_mode",
              "type": "Boolean",
              "description": "If set, this SIS import will be run in batch mode, deleting any data\npreviously imported via SIS that is not present in this latest import. See\nthe SIS CSV Format page for details."
            },
            {
              "name": "batch_mode_term_id",
              "type": "String",
              "description": "Limit deletions to only this term, if batch mode is enabled."
            },
            {
              "name": "override_sis_stickiness",
              "type": "Boolean",
              "description": "Many fields on records in Canvas can be marked \"sticky,\" which means that\nwhen something changes in the UI apart from the SIS, that field gets\n\"stuck.\" In this way, by default, SIS imports do not override UI changes.\nIf this field is present, however, it will tell the SIS import to ignore\n\"stickiness\" and override all fields."
            },
            {
              "name": "add_sis_stickiness",
              "type": "Boolean",
              "description": "This option, if present, will process all changes as if they were UI\nchanges. This means that \"stickiness\" will be added to changed fields. This\noption is only processed if 'override_sis_stickiness' is also provided."
            },
            {
              "name": "clear_sis_stickiness",
              "type": "Boolean",
              "description": "This option, if present, will clear \"stickiness\" from all fields touched by\nthis import. Requires that 'override_sis_stickiness' is also provided. If\n'add_sis_stickiness' is also provided, 'clear_sis_stickiness' will overrule\nthe behavior of 'add_sis_stickiness'"
            }
          ],
          "description": "Import SIS data",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/sis_imports"
        },
        {
          "arguments": [],
          "description": "Get SIS import status",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/sis_imports/:id"
        }
      ]
    },
    {
      "name": "Quiz Reports",
      "services": [
        {
          "arguments": [
            {
              "name": "quiz_report[report_type]",
              "type": "String, \"student_analysis\"|\"item_analysis\"",
              "description": "The type of report to be generated."
            },
            {
              "name": "quiz_report[includes_all_versions]",
              "type": "Optional, Boolean",
              "description": "Whether the report should consider all submissions or only the most recent.\nDefaults to false, ignored for item_analysis."
            }
          ],
          "description": "Create a quiz report",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/quizzes/:quiz_id/reports"
        },
        {
          "arguments": [],
          "description": "Get a quiz report",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/quizzes/:quiz_id/reports/:id"
        }
      ]
    },
    {
      "name": "Search",
      "services": [
        {
          "arguments": [
            {
              "name": "search",
              "type": "String",
              "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned."
            },
            {
              "name": "context",
              "type": "String",
              "description": "Limit the search to a particular course/group (e.g. \"course_3\" or\n\"group_4\")."
            },
            {
              "name": "exclude[]",
              "type": "String",
              "description": "Array of ids to exclude from the search. These may be user ids or\ncourse/group ids prefixed with \"course_\" or \"group_\" respectively, e.g. exclude[]=1&exclude=2&exclude[]=course_3"
            },
            {
              "name": "type",
              "type": "String, \"user\"|\"context\"",
              "description": "Limit the search just to users or contexts (groups/courses)."
            },
            {
              "name": "user_id",
              "type": "Integer",
              "description": "Search for a specific user id. This ignores the other above parameters, and\nwill never return more than one result."
            },
            {
              "name": "from_conversation_id",
              "type": "Integer",
              "description": "When searching by user_id, only users that could be normally messaged by\nthis user will be returned. This parameter allows you to specify a\nconversation that will be referenced for a shared context -- if both the\ncurrent user and the searched user are in the conversation, the user will\nbe returned. This is used to start new side conversations."
            },
            {
              "name": "permissions[]",
              "type": "String",
              "description": "Array of permission strings to be checked for each matched context (e.g.\n\"send_messages\"). This argument determines which permissions may be\nreturned in the response; it won't prevent contexts from being returned if\nthey don't grant the permission(s)."
            }
          ],
          "description": "Find recipients",
          "method": "GET",
          "endpoint": "/api/v1/conversations/find_recipients\n\n"
        }
      ]
    },
    {
      "name": "Quizzes",
      "services": [
        {
          "arguments": [
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial title of the quizzes to match and return."
            }
          ],
          "description": "List quizzes in a course",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/quizzes"
        },
        {
          "arguments": [],
          "description": "Get a single quiz",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/quizzes/:id"
        },
        {
          "arguments": [
            {
              "name": "quiz[title]",
              "type": "String",
              "description": "The quiz title."
            },
            {
              "name": "quiz[description]",
              "type": "String",
              "description": "A description of the quiz."
            },
            {
              "name": "quiz[quiz_type]",
              "type": "\"practice_quiz\"|\"assignment\"|\"graded_survey\"|\"survey\"",
              "description": "The type of quiz."
            },
            {
              "name": "quiz[assignment_group_id]",
              "type": "Integer",
              "description": "The assignment group id to put the assignment in. Defaults to the top\nassignment group in the course. Only valid if the quiz is graded, i.e. if\nquiz_type is \"assignment\" or \"graded_survey\"."
            },
            {
              "name": "quiz[time_limit]",
              "type": "Integer",
              "description": "Time limit to take this quiz, in minutes. Set to null for no time limit.\nDefaults to null."
            },
            {
              "name": "quiz[shuffle_answers]",
              "type": "Boolean",
              "description": "If true, quiz answers for multiple choice questions will be randomized for\neach student. Defaults to false."
            },
            {
              "name": "quiz[hide_results]",
              "type": "Optional, String, \"always\"|\"until_after_last_attempt\"",
              "description": "Dictates whether or not quiz results are hidden from students. If null,\nstudents can see their results after any attempt. If \"always\", students can\nnever see their results. If \"until_after_last_attempt\", students can only\nsee results after their last attempt. (Only valid if allowed_attempts >\n1). Defaults to null."
            },
            {
              "name": "quiz[show_correct_answers]",
              "type": "Optional, Boolean",
              "description": "Only valid if hide_results=null If false, hides correct answers from\nstudents when quiz results are viewed. Defaults to true."
            },
            {
              "name": "quiz[allowed_attempts]",
              "type": "Optional, Integer",
              "description": "Number of times a student is allowed to take a quiz. Set to -1 for\nunlimited attempts. Defaults to 1."
            },
            {
              "name": "quiz[scoring_policy]",
              "type": "String, \"keep_highest\"|\"keep_latest\"",
              "description": "Required and only valid if allowed_attempts > 1. Scoring policy for a\nquiz that students can take multiple times. Defaults to \"keep_highest\"."
            },
            {
              "name": "quiz[one_question_at_a_time]",
              "type": "Optional, Boolean",
              "description": "If true, shows quiz to student one question at a time. Defaults to false."
            },
            {
              "name": "quiz[cant_go_back]",
              "type": "Optional, Boolean",
              "description": "Only valid if one_question_at_a_time=true If true, questions are locked\nafter answering. Defaults to false."
            },
            {
              "name": "quiz[access_code]",
              "type": "Optional, String",
              "description": "Restricts access to the quiz with a password. For no access code\nrestriction, set to null. Defaults to null."
            },
            {
              "name": "quiz[ip_filter]",
              "type": "Optional, String",
              "description": "Restricts access to the quiz to computers in a specified IP range. Filters\ncan be a comma-separated list of addresses, or an address followed by a\nmask\n\nExamples:\n\n\"192.168.217.1\"\n\"192.168.217.1/24\"\n\"192.168.217.1/255.255.255.0\"\n\nFor no IP filter restriction, set to null. Defaults to null."
            },
            {
              "name": "quiz[due_at]",
              "type": "Timestamp",
              "description": "The day/time the quiz is due. Accepts times in ISO 8601 format, e.g.\n2011-10-21T18:48Z."
            },
            {
              "name": "quiz[lock_at]",
              "type": "Timestamp",
              "description": "The day/time the quiz is locked for students. Accepts times in ISO 8601\nformat, e.g. 2011-10-21T18:48Z."
            },
            {
              "name": "quiz[unlock_at]",
              "type": "Timestamp",
              "description": "The day/time the quiz is unlocked for students. Accepts times in ISO 8601\nformat, e.g. 2011-10-21T18:48Z."
            },
            {
              "name": "quiz[published]",
              "type": "Boolean",
              "description": "Whether the quiz should have a draft state of published or unpublished.\nNOTE: If students have started taking the quiz, or there are any\nsubmissions for the quiz, you may not unpublish a quiz and will recieve an\nerror."
            }
          ],
          "description": "Create a quiz",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/quizzes"
        },
        {
          "arguments": [
            {
              "name": "quiz[notify_of_update]",
              "type": "Boolean",
              "description": "If true, notifies users that the quiz has changed. Defaults to true"
            }
          ],
          "description": "Edit a quiz",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/quizzes/:id"
        },
        {
          "arguments": [],
          "description": "Delete a quiz",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/quizzes/:id"
        }
      ]
    },
    {
      "name": "Pages",
      "services": [
        {
          "arguments": [
            {
              "name": "sort",
              "type": "Optional, String, \"title\"|\"created_at\"|\"updated_at\"",
              "description": "Sort results by this field."
            },
            {
              "name": "order",
              "type": "Optional, String, \"asc\"|\"desc\"",
              "description": "The sorting order. Defaults to 'asc'."
            },
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial title of the pages to match and return."
            }
          ],
          "description": "List pages",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/pages\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "The unique identifier for a page."
            }
          ],
          "description": "Show page",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/pages/:url\n\n"
        },
        {
          "arguments": [
            {
              "name": "wiki_page[title]",
              "type": "String",
              "description": "The title for the new page."
            },
            {
              "name": "wiki_page[body]",
              "type": "String",
              "description": "The content for the new page."
            },
            {
              "name": "wiki_page[hide_from_students]",
              "type": "Boolean",
              "description": "Whether the page should be hidden from students.\n\nNote: when draft state is enabled, attempts to set\nhide_from_students will be ignored and the value returned will\nalways be the inverse of the published value."
            },
            {
              "name": "wiki_page[editing_roles]",
              "type": "Optional, String, \"teachers\"|\"students\"|\"members\"|\"public\"",
              "description": "Which user roles are allowed to edit this page. Any combination of these\nroles is allowed (separated by commas).\n\"teachers\"\n\nAllows editing by teachers in the course.\n\"students\"\n\nAllows editing by students in the course.\n\"members\"\n\nFor group wikis, allows editing by members of the group.\n\"public\"\n\nAllows editing by any user.\n\n\nAllows editing by teachers in the course.\n\nAllows editing by students in the course.\n\nFor group wikis, allows editing by members of the group.\n\nAllows editing by any user."
            },
            {
              "name": "wiki_page[notify_of_update]",
              "type": "Boolean",
              "description": "Whether participants should be notified when this page changes."
            },
            {
              "name": "wiki_page[published]",
              "type": "Optional, Boolean",
              "description": "Whether the page is published (true) or draft state (false).\n\nNote: when draft state is disabled, attempts to set\npublished will be ignored and the value returned will always\nbe true."
            },
            {
              "name": "wiki_page[front_page]",
              "type": "Optional, Boolean",
              "description": "Set an unhidden page as the front page (if true)"
            }
          ],
          "description": "Create page",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/pages\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "The unique identifier for a page."
            },
            {
              "name": "wiki_page[title]",
              "type": "String",
              "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result."
            },
            {
              "name": "wiki_page[body]",
              "type": "String",
              "description": "The content for the new page."
            },
            {
              "name": "wiki_page[hide_from_students]",
              "type": "Boolean",
              "description": "Whether the page should be hidden from students.\n\nNote: when draft state is enabled, attempts to set\nhide_from_students will be ignored and the value returned will\nalways be the inverse of the published value."
            },
            {
              "name": "wiki_page[editing_roles]",
              "type": "Optional, String, \"teachers\"|\"students\"|\"members\"|\"public\"",
              "description": "Which user roles are allowed to edit this page. Any combination of these\nroles is allowed (separated by commas).\n\"teachers\"\n\nAllows editing by teachers in the course.\n\"students\"\n\nAllows editing by students in the course.\n\"members\"\n\nFor group wikis, allows editing by members of the group.\n\"public\"\n\nAllows editing by any user.\n\n\nAllows editing by teachers in the course.\n\nAllows editing by students in the course.\n\nFor group wikis, allows editing by members of the group.\n\nAllows editing by any user."
            },
            {
              "name": "wiki_page[notify_of_update]",
              "type": "Boolean",
              "description": "Whether participants should be notified when this page changes."
            },
            {
              "name": "wiki_page[published]",
              "type": "Optional, Boolean",
              "description": "Whether the page is published (true) or draft state (false).\n\nNote: when draft state is disabled, attempts to set\npublished will be ignored and the value returned will always\nbe true."
            },
            {
              "name": "wiki_page[front_page]",
              "type": "Optional, Boolean",
              "description": "Set an unhidden page as the front page (if true)"
            }
          ],
          "description": "Update page",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/pages/:url\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "the unique identifier for a page."
            }
          ],
          "description": "Delete page",
          "method": "DELETE",
          "endpoint": "/api/v1/courses/:course_id/pages/:url\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "The unique identifier for a page"
            }
          ],
          "description": "List revisions",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/pages/:url/revisions\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "The unique identifier for a page"
            },
            {
              "name": "summary",
              "type": "Optional, Boolean",
              "description": "If set, exclude page content from results"
            }
          ],
          "description": "Show revision",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/pages/:url/revisions/latest\n\n"
        },
        {
          "arguments": [
            {
              "name": "url",
              "type": "String",
              "description": "The unique identifier for the page"
            },
            {
              "name": "revision_id",
              "type": "Integer",
              "description": "The revision to revert to (use the List Revisions API to see available revisions)"
            }
          ],
          "description": "Revert to revision",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/pages/:url/revisions/:revision_id\n\n"
        }
      ]
    },
    {
      "name": "Submissions",
      "services": [
        {
          "arguments": [
            {
              "name": "comment[text_comment]",
              "type": "String",
              "description": "Include a textual comment with the submission."
            },
            {
              "name": "submission[submission_type]",
              "type": "String, \"online_text_entry\"|\"online_url\"|\"online_upload\"|\"media_recording\"",
              "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will\nbe rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission must be set to \"online_url\",\notherwise the submission parameter will be\nignored."
            },
            {
              "name": "submission[body]",
              "type": "String",
              "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\"."
            },
            {
              "name": "submission[url]",
              "type": "String",
              "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be\nassumed. Requires a submission_type of \"online_url\"."
            },
            {
              "name": "submission[file_ids][]",
              "type": "Integer",
              "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions\nUpload a file API.\n\nRequires a submission_type of \"online_upload\"."
            },
            {
              "name": "submission[media_comment_id]",
              "type": "Integer",
              "description": "The media comment id to submit. Media comment ids can be submitted via this\nAPI, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\"."
            },
            {
              "name": "submission[media_comment_type]",
              "type": "String, \"audio\"|\"video\"",
              "description": "The type of media comment being submitted."
            }
          ],
          "description": "Submit an assignment",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/submissions\n\n"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"submission_history\"|\"submission_comments\"|\"rubric_assessment\"|\"assignment\"",
              "description": "Associations to include with the group."
            }
          ],
          "description": "List assignment submissions",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/submissions\n\n"
        },
        {
          "arguments": [
            {
              "name": "student_ids[]",
              "type": "String",
              "description": "List of student ids to return submissions for. If this argument is omitted,\nreturn submissions for the calling user. Students may only list their own\nsubmissions. Observers may only list those of associated students."
            },
            {
              "name": "assignment_ids[]",
              "type": "String",
              "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned."
            },
            {
              "name": "grouped",
              "type": "Boolean",
              "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions."
            },
            {
              "name": "include[]",
              "type": "String, \"submission_history\"|\"submission_comments\"|\"rubric_assessment\"|\"assignment\"|\"total_scores\"",
              "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument."
            }
          ],
          "description": "List submissions for multiple assignments",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/students/submissions\n\n"
        },
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"submission_history\"|\"submission_comments\"|\"rubric_assessment\"",
              "description": "Associations to include with the group."
            }
          ],
          "description": "Get a single submission",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id\n\n"
        },
        {
          "arguments": [],
          "description": "Upload a file",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id/files\n\n"
        },
        {
          "arguments": [
            {
              "name": "comment[text_comment]",
              "type": "String",
              "description": "Add a textual comment to the submission."
            },
            {
              "name": "comment[group_comment]",
              "type": "Optional, Boolean",
              "description": "Whether or not this comment should be sent to the entire group (defaults to\nfalse). Ignored if this is not a group assignment or if no text_comment is\nprovided."
            },
            {
              "name": "comment[media_comment_id]",
              "type": "Integer",
              "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of limited\nuse."
            },
            {
              "name": "comment[media_comment_type]",
              "type": "String, \"audio\"|\"video\"",
              "description": "The type of media comment being added."
            },
            {
              "name": "submission[posted_grade]",
              "type": "String",
              "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\npoints\n\nA floating point or integral value, such as \"13.5\". The grade\n\n\nwill be interpreted directly as the score of the assignment.\nValues above assignment.points_possible are allowed, for awarding\nextra credit.\npercentage\n\nA floating point value appended with a percent sign, such as\n\n\n\"40%\". The grade will be interpreted as a percentage score on the\nassignment, where 100% == assignment.points_possible. Values above 100%\nare allowed, for awarding extra credit.\nletter grade\n\nA letter grade, following the assignment's defined letter\n\n\ngrading scheme. For example, \"A-\". The resulting score will be the high\nend of the defined range for the letter grade. For instance, if \"B\" is\ndefined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\nletter grade will be rejected if the assignment does not have a defined\nletter grading scheme. For more fine-grained control of scores, pass in\npoints or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\"\n\nA string value of \"pass\" or \"complete\"\n\n\nwill give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be assigned\na score of 0 or assignment.points_possible, nothing inbetween. If a\nposted_grade in the \"points\" or \"percentage\" format is sent, the grade will\nonly be accepted if the grade equals one of those two values.\n\nA floating point or integral value, such as \"13.5\". The grade\n\nA floating point value appended with a percent sign, such as\n\nA letter grade, following the assignment's defined letter\n\nA string value of \"pass\" or \"complete\""
            },
            {
              "name": "rubric_assessment",
              "type": "RubricAssessment",
              "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\nrubric_assessment[points]\n\nThe points awarded for this row.\nrubric_assessment[comments]\n\nComments to add for this row.\n\n\nFor example, if the assignment rubric is (in JSON format):\n\n[\n  {\n    'id': 'crit1',\n    'points': 10,\n    'description': 'Criterion 1',\n    'ratings':\n    [\n      { 'description': 'Good', 'points': 10 },\n      { 'description': 'Poor', 'points': 3 }\n    ]\n  },\n  {\n    'id': 'crit2',\n    'points': 5,\n    'description': 'Criterion 2',\n    'ratings':\n    [\n      { 'description': 'Complete', 'points': 5 },\n      { 'description': 'Incomplete', 'points': 0 }\n    ]\n  }\n]\n\nThen a possible set of values for rubric_assessment would be:\n\nrubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done.\n\nThe points awarded for this row.\n\nComments to add for this row."
            }
          ],
          "description": "Grade or comment on a submission",
          "method": "PUT",
          "endpoint": "/api/v1/courses/:course_id/assignments/:assignment_id/submissions/:user_id\n\n"
        }
      ]
    },
    {
      "name": "Sections",
      "services": [
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "Optional, String, \"students\"|\"avatar_url\"",
              "description": ""
            }
          ],
          "description": "List course sections",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/sections"
        },
        {
          "arguments": [
            {
              "name": "course_section[name]",
              "type": "String",
              "description": "The name of the section"
            },
            {
              "name": "course_section[sis_section_id]",
              "type": "Optional, String",
              "description": "The sis ID of the section"
            },
            {
              "name": "course_section[start_at]",
              "type": "Optional, DateTime",
              "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z"
            },
            {
              "name": "course_section[end_at]",
              "type": "Optional, DateTime",
              "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z"
            }
          ],
          "description": "Create course section",
          "method": "POST",
          "endpoint": "/api/v1/courses/:course_id/sections"
        },
        {
          "arguments": [],
          "description": "Cross-list a Section",
          "method": "POST",
          "endpoint": "/api/v1/sections/:id/crosslist/:new_course_id"
        },
        {
          "arguments": [],
          "description": "De-cross-list a Section",
          "method": "DELETE",
          "endpoint": "/api/v1/sections/:id/crosslist"
        },
        {
          "arguments": [],
          "description": "Edit a section",
          "method": "PUT",
          "endpoint": "/api/v1/sections/:id"
        },
        {
          "arguments": [],
          "description": "Get section information",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/sections/:id\n\n"
        },
        {
          "arguments": [],
          "description": "Delete a section",
          "method": "DELETE",
          "endpoint": "/api/v1/sections/:id"
        }
      ]
    },
    {
      "name": "Tabs",
      "services": [
        {
          "arguments": [
            {
              "name": "include[]",
              "type": "String, \"external\"",
              "description": "Optionally include external tool tabs in the returned list of tabs (Only\nhas effect for courses, not groups)"
            }
          ],
          "description": "List available tabs for a course or group",
          "method": "GET",
          "endpoint": "/api/v1/courses/:course_id/tabs\n\n"
        }
      ]
    },
    {
      "name": "Roles",
      "services": [
        {
          "arguments": [
            {
              "name": "account_id",
              "type": "String",
              "description": "The id of the account to retrieve roles for."
            },
            {
              "name": "state[]",
              "type": "String, \"active\"|\"inactive\"",
              "description": "Filter by role state. If this argument is omitted, only 'active' roles are\nreturned."
            }
          ],
          "description": "List roles",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/roles"
        },
        {
          "arguments": [
            {
              "name": "account_id",
              "type": "String",
              "description": "The id of the account containing the role"
            },
            {
              "name": "role",
              "type": "String",
              "description": "The name and unique identifier for the role"
            }
          ],
          "description": "Get a single role",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/roles/:role"
        },
        {
          "arguments": [
            {
              "name": "role",
              "type": "String",
              "description": "Label and unique identifier for the role."
            },
            {
              "name": "base_role_type",
              "type": "Optional, String, \"AccountMembership\"|\"StudentEnrollment\"|\"TeacherEnrollment\"|\"TaEnrollment\"|\"ObserverEnrollment\"|\"DesignerEnrollment\"",
              "description": "Specifies the role type that will be used as a base for the permissions\ngranted to this role.\n\nDefaults to 'AccountMembership' if absent"
            },
            {
              "name": "permissions[<X>][explicit]",
              "type": "Optional, Boolean",
              "description": ""
            },
            {
              "name": "permissions[<X>][enabled]",
              "type": "Optional, Boolean",
              "description": "If explicit is 1 and enabled is 1, permission <X> will be explicitly\ngranted to this role. If explicit is 1 and enabled has any other value\n(typically 0), permission <X> will be explicitly denied to this role.\nIf explicit is any other value (typically 0) or absent, or if enabled is\nabsent, the value for permission <X> will be inherited from upstream.\nIgnored if permission <X> is locked upstream (in an ancestor\naccount).\n\nMay occur multiple times with unique values for <X>. Recognized\npermission names for <X> are:\n\n[For Account-Level Roles Only]\nbecome_user                      -- Become other users\nmanage_account_memberships       -- Add/remove other admins for the account\nmanage_account_settings          -- Manage account-level settings\nmanage_alerts                    -- Manage global alerts\nmanage_courses                   -- Manage ( add / edit / delete ) courses\nmanage_developer_keys            -- Manage developer keys\nmanage_global_outcomes           -- Manage learning outcomes\nmanage_jobs                      -- Manage background jobs\nmanage_role_overrides            -- Manage permissions\nmanage_storage_quotas            -- Set storage quotas for courses, groups, and users\nmanage_sis                       -- Import and manage SIS data\nmanage_site_settings             -- Manage site-wide and plugin settings\nmanage_user_logins               -- Modify login details for users\nread_course_content              -- View course content\nread_course_list                 -- View the list of courses\nread_messages                    -- View notifications sent to users\nsite_admin                       -- Use the Site Admin section and admin all other accounts\nview_error_reports               -- View error reports\nview_statistics                  -- View statistics\n\n[For both Account-Level and Course-Level roles]\n Note: Applicable enrollment types for course-level roles are given in brackets:\n       S = student, T = teacher, A = TA, D = designer, O = observer.\n       Lower-case letters indicate permissions that are off by default.\n       A missing letter indicates the permission cannot be enabled for the role\n       or any derived custom roles.\nchange_course_state              -- [ TaD ] Change course state\ncomment_on_others_submissions    -- [sTAD ] View all students' submissions and make comments on them\ncreate_collaborations            -- [STADo] Create student collaborations\ncreate_conferences               -- [STADo] Create web conferences\nmanage_admin_users               -- [ Tad ] Add/remove other teachers, course designers or TAs to the course\nmanage_assignments               -- [ TADo] Manage (add / edit / delete) assignments and quizzes\nmanage_calendar                  -- [sTADo] Add, edit and delete events on the course calendar\nmanage_content                   -- [ TADo] Manage all other course content\nmanage_files                     -- [ TADo] Manage (add / edit / delete) course files\nmanage_grades                    -- [ TA  ] Edit grades\nmanage_groups                    -- [ TAD ] Manage (create / edit / delete) groups\nmanage_interaction_alerts        -- [ Ta  ] Manage alerts\nmanage_outcomes                  -- [sTaDo] Manage learning outcomes\nmanage_sections                  -- [ TaD ] Manage (create / edit / delete) course sections\nmanage_students                  -- [ TAD ] Add/remove students for the course\nmanage_user_notes                -- [ TA  ] Manage faculty journal entries\nmanage_rubrics                   -- [ TAD ] Edit assessing rubrics\nmanage_wiki                      -- [ TADo] Manage wiki (add / edit / delete pages)\nread_forum                       -- [STADO] View discussions\nmoderate_forum                   -- [sTADo] Moderate discussions (delete/edit others' posts, lock topics)\npost_to_forum                    -- [STADo] Post to discussions\nread_question_banks              -- [ TADo] View and link to question banks\nread_reports                     -- [sTAD ] View usage reports for the course\nread_roster                      -- [STADo] See the list of users\nread_sis                         -- [sTa  ] Read SIS data\nsend_messages                    -- [STADo] Send messages to individual course members\nsend_messages_all                -- [sTADo] Send messages to the entire class\nview_all_grades                  -- [ TAd ] View all grades\nview_group_pages                 -- [sTADo] View the group pages of all student groups\n\n\nSome of these permissions are applicable only for roles on the site admin\naccount, on a root account, or for course-level roles with a particular\nbase role type; if a specified permission is inapplicable, it will be\nignored.\n\nAdditional permissions may exist based on installed plugins."
            },
            {
              "name": "permissions[<X>][locked]",
              "type": "Optional, Boolean",
              "description": "If the value is 1, permission <X> will be locked downstream (new\nroles in subaccounts cannot override the setting). For any other value,\npermission <X> is left unlocked. Ignored if permission <X> is\nalready locked upstream. May occur multiple times with unique values for\n<X>."
            }
          ],
          "description": "Create a new role",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/roles"
        },
        {
          "arguments": [
            {
              "name": "role",
              "type": "String",
              "description": "Label and unique identifier for the role."
            }
          ],
          "description": "Deactivate a role",
          "method": "DELETE",
          "endpoint": "/api/v1/accounts/:account_id/roles/:role"
        },
        {
          "arguments": [
            {
              "name": "role",
              "type": "String",
              "description": "Label and unique identifier for the role."
            }
          ],
          "description": "Activate a role",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/roles/:role/activate"
        },
        {
          "arguments": [
            {
              "name": "permissions[<X>][explicit]",
              "type": "Optional, Boolean",
              "description": ""
            },
            {
              "name": "permissions[<X>][enabled]",
              "type": "Optional, Boolean",
              "description": "These arguments are described in the documentation for the\nadd_role method."
            }
          ],
          "description": "Update a role",
          "method": "PUT",
          "endpoint": "/api/v1/accounts/:account_id/roles/:role"
        }
      ]
    },
    {
      "name": "Services",
      "services": [
        {
          "arguments": [],
          "description": "Get Kaltura config",
          "method": "GET",
          "endpoint": "/api/v1/services/kaltura"
        },
        {
          "arguments": [],
          "description": "Start Kaltura session",
          "method": "POST",
          "endpoint": "/api/v1/services/kaltura_session"
        }
      ]
    },
    {
      "name": "Users",
      "services": [
        {
          "arguments": [
            {
              "name": "search_term",
              "type": "Optional, String",
              "description": "The partial name or full ID of the users to match and return in the results\nlist. Must be at least 3 characters."
            }
          ],
          "description": "List users in account",
          "method": "GET",
          "endpoint": "/api/v1/accounts/:account_id/users"
        },
        {
          "arguments": [],
          "description": "List the activity stream",
          "method": "GET",
          "endpoint": "/api/v1/users/self/activity_stream\n\n"
        },
        {
          "arguments": [],
          "description": "Activity stream summary",
          "method": "GET",
          "endpoint": "/api/v1/users/self/activity_stream/summary"
        },
        {
          "arguments": [],
          "description": "List the TODO items",
          "method": "GET",
          "endpoint": "/api/v1/users/self/todo"
        },
        {
          "arguments": [],
          "description": "List upcoming assignments, calendar events",
          "method": "GET",
          "endpoint": "/api/v1/users/self/upcoming_events"
        },
        {
          "arguments": [],
          "description": "Upload a file",
          "method": "POST",
          "endpoint": "/api/v1/users/:user_id/files"
        },
        {
          "arguments": [
            {
              "name": "user[name]",
              "type": "Optional, String",
              "description": "The full name of the user. This name will be used by teacher for grading."
            },
            {
              "name": "user[short_name]",
              "type": "Optional, String",
              "description": "User's name as it will be displayed in discussions, messages, and comments."
            },
            {
              "name": "user[sortable_name]",
              "type": "Optional, String",
              "description": "User's name as used to sort alphabetically in lists."
            },
            {
              "name": "user[time_zone]",
              "type": "Optional, String",
              "description": "The time zone for the user. Allowed time zones are\nIANA time zones or friendlier\nRuby on Rails time zones."
            },
            {
              "name": "user[locale]",
              "type": "Optional, String",
              "description": "The user's preferred language as a two-letter ISO 639-1 code."
            },
            {
              "name": "user[birthdate]",
              "type": "Optional, Date",
              "description": "The user's birth date."
            },
            {
              "name": "pseudonym[unique_id]",
              "type": "String",
              "description": "User's login ID."
            },
            {
              "name": "pseudonym[password]",
              "type": "Optional, String",
              "description": "User's password."
            },
            {
              "name": "pseudonym[sis_user_id]",
              "type": "Optional, String",
              "description": "SIS ID for the user's account. To set this parameter, the caller must be\nable to manage SIS permissions."
            },
            {
              "name": "pseudonym[send_confirmation]",
              "type": "Optional, Boolean",
              "description": "Send user notification of account creation if true."
            },
            {
              "name": "communication_channel[type]",
              "type": "Optional, String",
              "description": "The communication channel type, e.g. 'email' or 'sms'."
            },
            {
              "name": "communication_channel[address]",
              "type": "Optional, String",
              "description": "The communication channel address, e.g. the user's email address."
            }
          ],
          "description": "Create a user",
          "method": "POST",
          "endpoint": "/api/v1/accounts/:account_id/users"
        },
        {
          "arguments": [
            {
              "name": "manual_mark_as_read",
              "type": "Boolean",
              "description": "If true, require user to manually mark discussion posts as read (don't\nauto-mark as read)."
            }
          ],
          "description": "Update user settings.",
          "method": "GET",
          "endpoint": "/api/v1/users/:id/settings\n\n"
        },
        {
          "arguments": [
            {
              "name": "user[name]",
              "type": "Optional, String",
              "description": "The full name of the user. This name will be used by teacher for grading."
            },
            {
              "name": "user[short_name]",
              "type": "Optional, String",
              "description": "User's name as it will be displayed in discussions, messages, and comments."
            },
            {
              "name": "user[sortable_name]",
              "type": "Optional, String",
              "description": "User's name as used to sort alphabetically in lists."
            },
            {
              "name": "user[time_zone]",
              "type": "Optional, String",
              "description": "The time zone for the user. Allowed time zones are\nIANA time zones or friendlier\nRuby on Rails time zones."
            },
            {
              "name": "user[locale]",
              "type": "Optional, String",
              "description": "The user's preferred language as a two-letter ISO 639-1 code."
            },
            {
              "name": "user[avatar][token]",
              "type": "Optional, String",
              "description": "A unique representation of the avatar record to assign as the user's\ncurrent avatar. This token can be obtained from the user avatars endpoint.\nThis supersedes the user[url] argument, and if\nboth are included the url will be ignored. Note: this is an internal\nrepresentation and is subject to change without notice. It should be\nconsumed with this api endpoint and used in the user update endpoint, and\nshould not be constructed by the client."
            },
            {
              "name": "user[avatar][url]",
              "type": "Optional, String",
              "description": "To set the user's avatar to point to an external url, do not include a\ntoken and instead pass the url here. Warning: For maximum compatibility,\nplease use 128 px square images."
            }
          ],
          "description": "Edit a user",
          "method": "PUT",
          "endpoint": "/api/v1/users/:id"
        },
        {
          "arguments": [],
          "description": "Delete a user",
          "method": "DELETE",
          "endpoint": "/api/v1/accounts/:account_id/users/:id"
        },
        {
          "arguments": [],
          "description": "Follow a user",
          "method": "PUT",
          "endpoint": "/api/v1/users/:user_id/followers/self"
        },
        {
          "arguments": [],
          "description": "Un-follow a user",
          "method": "DELETE",
          "endpoint": "/api/v1/users/:user_id/followers/self"
        },
        {
          "arguments": [],
          "description": "Get user profile",
          "method": "GET",
          "endpoint": "/api/v1/users/:user_id/profile"
        },
        {
          "arguments": [],
          "description": "List avatar options",
          "method": "GET",
          "endpoint": "/api/v1/users/:user_id/avatars"
        },
        {
          "arguments": [
            {
              "name": "start_time",
              "type": "Optional, DateTime",
              "description": "The beginning of the time range from which you want page views."
            },
            {
              "name": "end_time",
              "type": "Optional, DateTime",
              "description": "The end of the time range from which you want page views."
            }
          ],
          "description": "List user page views",
          "method": "GET",
          "endpoint": "/api/v1/users/:user_id/page_views"
        }
      ]
    }
  ]
}